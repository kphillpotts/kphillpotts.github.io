<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/android/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2019-01-12T16:48:00+01:00</updated>
  <id>/tag/android/feed.xml</id>

  
  
  

  
    <title type="html">Kym’s Blog | </title>
  

  
    <subtitle>I write about Azure, Xamarin.Forms, Connected Apps and whatever else might be on my mind.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Xamarin Link Roundup – 11 May 2016</title>
      <link href="/xamarin-link-roundup-11-may-2016/" rel="alternate" type="text/html" title="Xamarin Link Roundup &amp;#8211; 11 May 2016" />
      <published>2016-05-11T19:03:34+02:00</published>
      <updated>2016-05-11T19:03:34+02:00</updated>
      <id>/xamarin-link-roundup-11-may-2016</id>
      <content type="html" xml:base="/xamarin-link-roundup-11-may-2016/">&lt;p&gt;More fantastic links from around the community!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;xamarinforms&quot;&gt;Xamarin.Forms&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kent-boogaart.com/blog/jason-smith's-xamarin-forms-performance-tips&quot; target=&quot;_blank&quot;&gt;Jason Smith’s Xamarin Forms Performance Tips&lt;/a&gt; – Jason Smith’s Xamarin Forms Performance Tips&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.xamarin.com/scaffolding-xamarin-forms-pages-with-datapages/&quot; target=&quot;_blank&quot;&gt;Scaffolding Xamarin.Forms Pages with DataPages | Xamarin Blog&lt;/a&gt; – An introduction to Xamarin.Forms data pages on the Xamarin Blog&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://motzcod.es/post/143599079477/xamarin-evolve-2016-app-development-retrospective&quot; target=&quot;_blank&quot;&gt;Xamarin Evolve 2016 App Development Retrospective&lt;/a&gt; – @JamesMontemagno shares the highs, lows and lessons learnt creating the #XamarinEvolve app.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://motzcod.es/post/143702671962/xamarinforms-xaml-previewer-design-time-data&quot; target=&quot;_blank&quot;&gt;Xamarin.Forms XAML Previewer Design Time Data&lt;/a&gt; – @JamesMontemagno shows how to integrate design time data into the new XAML Previewer!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.johankarlsson.net/2016/05/a-very-small-pubsub-solution-for.html?m=1&quot; target=&quot;_blank&quot;&gt;A very small pub/sub solution for Xamarin Forms&lt;/a&gt; – A very small pub/sub solution for Xamarin Forms&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xamarinhelp.com/xamarin-forms-applinks/&quot; target=&quot;_blank&quot;&gt;Xamarin Forms Deep Linking and App Indexing with AppLinks&lt;/a&gt; – App indexing and deep linking in the Xamarin world&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ios&quot;&gt;iOS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xamarinhelp.com/new-xamarin-ios-visual-studio/&quot; target=&quot;_blank&quot;&gt;Detailed Look At Whats New in Xamarin.iOS for Visual Studio&lt;/a&gt; – Adam Pedley gives the rundown of what’s new for Xamarin.iOS for Visual Studio&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://iosstack.com/tools/&quot; target=&quot;_blank&quot;&gt;Tools – iOSStack&lt;/a&gt; – IOSStack lists out some cool tools to make your Mobile development life easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android&quot;&gt;Android&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sharpmobilecode.com/using-google-place-picker-for-android/&quot; target=&quot;_blank&quot;&gt;Using Google Place Picker For Android&lt;/a&gt; – Ruben Macias shows how to use the PlacePicker from the Google Places API in Xamarin.Android.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;components-and-tools&quot;&gt;Components and Tools&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://realm.io/news/introducing-realm-xamarin/&quot; target=&quot;_blank&quot;&gt;Introducing Realm Xamarin – Realm is a mobile database: a replacement for SQLite &amp;amp; Core Data&lt;/a&gt; – Realm mobile database release for Xamarin. Sounds super exciting!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.verslu.is/uncategorized/nuget-gold-nuggets-packages-which-are-in-my-almost-every-xamarin-project/&quot; target=&quot;_blank&quot;&gt;NuGet gold nuggets – packages which are in my almost every Xamarin project&lt;/a&gt; – Gerald Versluis shares a list of NuGet Nuggets&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gregshackles.com/using-1writer-as-a-presentation-assistant/&quot; target=&quot;_blank&quot;&gt;Using iOS and 1Writer as a Presentation Assistant&lt;/a&gt; – Greg Shackles shows a cool workflow and a nice tool for presenters&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thexamarinjournal.com/xamarin-dev-ops-with-vsts-getting-started/&quot; target=&quot;_blank&quot;&gt;Getting Started with VSTS and Xamarin&lt;/a&gt; – Richard Woollcott has started a blog series on Mobile DevOps with VSTS / XS / Hockey / Test Cloud&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ghuntley.com/archive/2016/05/04/announcing-httpclientdiagnostics/&quot; target=&quot;_blank&quot;&gt;Announcing HttpClientDiagnostics – Geoffrey Huntley&lt;/a&gt; – HttpClientDiagnostics is a cross platform, portable class library that provides tracing/logging telemetry of Microsoft.Net.HttpClient requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pihrt.net/SnippetEssentials&quot; target=&quot;_blank&quot;&gt;Snippet Essentials&lt;/a&gt; – Because you can never have enough Snippets – Snippet Essentials&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.walkingtree.in/2016/05/05/xamarin-azure-mobile-services-a-primer/&quot; target=&quot;_blank&quot;&gt;Azure App Services and Xamarin&lt;/a&gt; – Get started with Azure App Services and Xamarin with this tutorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rendr.io/from-sketch-to-app-a-design-to-development-workflow/&quot; target=&quot;_blank&quot;&gt;From Sketch to App: A Design to Development Workflow&lt;/a&gt; – David Ortinau continues his #XamarinEvolve discussion on Design to Development workflow.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/7-tips-for-creating-engaged-informed-users&quot; target=&quot;_blank&quot;&gt;7 Tips for Creating Engaged, Informed Users – DZone Mobile&lt;/a&gt; – 7 tips for creating great mobile app onboarding experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.telerik.com/featured/10-developer-takeaways-xamarin-evolve/?linkId=24158759&quot; target=&quot;_blank&quot;&gt;10 Developer Takeaways from Xamarin Evolve -Telerik Developer Network&lt;/a&gt; – Summary of the key takeaways for developers from #XamarinEvolve&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-xamarin-link-blogs&quot;&gt;More Xamarin Link Blogs&lt;/h2&gt;

&lt;p&gt;Here are links to the other great Xamarin link blogs out there that are updated regularly&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.xamarinweekly.com/&quot;&gt;Xamarin Weekly&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A free, once-weekly e-mail newsletter roundup of all things Xamarin. Posted Fridays&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://xamarinappdev.com/&quot;&gt;Xamarin App Developer Links&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;The latest tips, tutorials, news, and resources for Xamarin app developers. Posted Daily&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://csharpmobiledaily.com/&quot;&gt;C# Mobile (Xamarin) Daily&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Your cross-platform C# mobile magazine. Posted Daily&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;hhttp://planet.xamarin.com/&quot;&gt;Xamarin Community Blogs&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This is an automatic aggregator which pulls articles from bloggers in the Xamarin developer community.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym</name>
        
        
      </author>

      

      
        <category term="Android" />
      
        <category term="iOS" />
      
        <category term="Resources" />
      
        <category term="xamarin" />
      
        <category term="xamarin.forms" />
      

      
        <summary type="html">More fantastic links from around the community!</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Xamarin, iBeacons and Geofencing – Some Resources</title>
      <link href="/xamarin-ibeacons-and-geofencing-some-resources/" rel="alternate" type="text/html" title="Xamarin, iBeacons and Geofencing &amp;#8211; Some Resources" />
      <published>2014-05-18T23:11:02+02:00</published>
      <updated>2014-05-18T23:11:02+02:00</updated>
      <id>/xamarin-ibeacons-and-geofencing-some-resources</id>
      <content type="html" xml:base="/xamarin-ibeacons-and-geofencing-some-resources/">&lt;p&gt;For an upcoming geekend (a weekend hackfest) we are looking at spending some time digging into iBeacon and Geofencing technologies.  &lt;span style=&quot;line-height: 1.5em;&quot;&gt;I was going to email some of these resources I have found to the participants but thought it might be better if I blog them as a resource for others. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hope it helps&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Some General Info About Geofencing and&lt;/strong&gt;&lt;/span&gt; &lt;strong&gt;Beacons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a style=&quot;line-height: 1.5em;&quot; href=&quot;http://youtu.be/TQrhJZnZacE&quot; target=&quot;_blank&quot;&gt;What’s the difference between beacons and geofencing?&lt;/a&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt; (video link).&lt;/span&gt;&lt;/span&gt; &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;There is also an interesting &lt;/span&gt;&lt;a style=&quot;line-height: 1.5em;&quot; href=&quot;http://prezi.com/qvmtmmpxpq1p/proximity-the-new-thing-in-retail/&quot; target=&quot;_blank&quot;&gt;prezi presentation here&lt;/a&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;, bit sales oriented, but not bad.&lt;/span&gt;&lt;/span&gt; &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;If you need even more convincing that location and geofencing are the future then have a read of this old &lt;/span&gt;&lt;a style=&quot;line-height: 1.5em;&quot; href=&quot;http://www.wired.com/2013/12/4-use-cases-for-ibeacon-the-most-exciting-tech-you-havent-heard-of/&quot; target=&quot;_blank&quot;&gt;Wired article.&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong style=&quot;line-height: 1.5em;&quot;&gt;Geofencing Implementations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.xamarin.com/recipes/ios/multitasking/geofencing/&quot; target=&quot;_blank&quot;&gt;Xamarin iOS Geofence documentation&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jayway.com/2014/04/22/windows-phone-8-1-for-developers-geolocation-and-geofencing/&quot; target=&quot;_blank&quot;&gt;Windows Phone 8.1 for Developers – Geolocation and Geofencing&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.rajenki.com/2014/04/trigger-background-task-using-geofence-windows-phone-8-1/?utm_source=rss&quot; target=&quot;_blank&quot;&gt;Trigger a Background Task using Geofence on Windows Phone 8.1&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://forums.xamarin.com/discussion/15607/geofencing-and-geolocation&quot; target=&quot;_blank&quot;&gt;Android Geofencing and Geolocation&lt;/a&gt; – Xamrin Forum link&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Beacons, iBeacons and BLE Implementations&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;James Montemagno’s presentation on &lt;a href=&quot;http://www.slideshare.net/JamesMontemagno/ibeacons-for-everyone-from-ios-to-android&quot; target=&quot;_blank&quot;&gt;iBeacons for Everyone, from iOS to Android&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;Mike Bluestein blog post (and sample app) – &lt;a href=&quot;http://blog.xamarin.com/play-find-the-monkey-with-ios-7-ibeacons/&quot; target=&quot;_blank&quot;&gt;Play ‘Find The Monkey’ with iOS 7 iBeacons&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;Larry O’Briens blog post on &lt;a href=&quot;http://www.knowing.net/index.php/2013/09/19/xamarin-code-for-ibeacons/&quot; target=&quot;_blank&quot;&gt;Xamairn Code for iBeacons&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/boblautenbach/iBeacon-Generic/tree/master&quot; target=&quot;_blank&quot;&gt;iBeacon Generic&lt;/a&gt; – A Generic Monotouch.iOS binding for beacons.&lt;/li&gt;
  &lt;li&gt;Very thorough article by Vincent Hoogendoorn – &lt;a href=&quot;http://www.macaw.nl/weblog/2014/4/building-cross-platform-ibeacon-apps-for-ios-android-and-windows-with-csharp-and-xamarin&quot; target=&quot;_blank&quot;&gt;Building Cross-Platform iBeacon Apps for iOS, Android and Windows with C# and Xamarin&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a style=&quot;line-height: 1.5em;&quot; href=&quot;https://components.xamarin.com/view/xamarin-android-ibeacon-service&quot; target=&quot;_blank&quot;&gt;Chris Riesgo Android iBeacon Service&lt;/a&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt; (Radius Network beacons)&lt;/span&gt;&lt;/span&gt; &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;Greg Shackles &lt;/span&gt;&lt;a style=&quot;line-height: 1.5em;&quot; href=&quot;https://github.com/gshackles/Estimote-iOS-Xamarin&quot; target=&quot;_blank&quot;&gt;Estimote iOS Bindings for Xamarin&lt;br /&gt; &lt;/a&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;Tom Opgenorth has an &lt;/span&gt;&lt;a style=&quot;line-height: 1.5em;&quot; href=&quot;https://components.xamarin.com/view/estimotesdk&quot; target=&quot;_blank&quot;&gt;Estimote SDK binding for Android&lt;/a&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt; in the Xamarin Component store.&lt;/span&gt;&lt;/span&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a style=&quot;line-height: 1.5em;&quot; href=&quot;https://github.com/woutercx/Xamarin-EstimoteBeacons&quot; target=&quot;_blank&quot;&gt;Xamarin-EstimoteBeacons on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym</name>
        
        
      </author>

      

      
        <category term="Android" />
      
        <category term="development" />
      
        <category term="geofencing" />
      
        <category term="ibeacon" />
      
        <category term="iOS" />
      
        <category term="Resources" />
      
        <category term="Windows Phone" />
      
        <category term="xamarin" />
      

      
        <summary type="html">For an upcoming geekend (a weekend hackfest) we are looking at spending some time digging into iBeacon and Geofencing technologies.  I was going to email some of these resources I have found to the participants but thought it might be better if I blog them as a resource for others. </summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Xamarin and Android – Specific Solutions to Specific Problems #3</title>
      <link href="/xamarin-and-android-specific-solutions-to-specific-problems-3-3/" rel="alternate" type="text/html" title="Xamarin and Android – Specific Solutions to Specific Problems #3" />
      <published>2013-09-16T01:15:33+02:00</published>
      <updated>2013-09-16T01:15:33+02:00</updated>
      <id>/xamarin-and-android-specific-solutions-to-specific-problems-3-3</id>
      <content type="html" xml:base="/xamarin-and-android-specific-solutions-to-specific-problems-3-3/">&lt;p&gt;Welcome to another installment in my series exploring the specific problems that nearly beat me this week. I write these on Sunday night after a huge week of balancing my work and fatherly responsibilities so I hope they make sense…&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;**&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. I have put a relative layout inside a scroll view and my layout_alignParentBottom properties don’t work any more. How can I align elements to the bottom of a layout inside a scroll view?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As soon as put things in a scroll view I saw this exact behaivour. After some searching on the interwebs I found the following &lt;a href=&quot;http://stackoverflow.com/questions/3126347/android-relativelayout-how-to-alignparentbottom-when-wrapped-in-a-scrollview&quot;&gt;quote by Romain Guy&lt;/a&gt; on Stack Overflow:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Using fill_parent as the height of a child of a ScrollView is meaningless. You are telling the RelativeLayout to be always as tall as its parent. In this case, the ScrollView becomes useless! The height of the RelativeLayout should be set to wrap_content, in which case, depending on what the RelativeLayout contains, alignParentBottom may not work as you expect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The trick here is to use the &lt;strong&gt;&lt;em&gt;android:fillViewport&lt;/em&gt;&lt;/strong&gt; property on the scroll view. As soon as you set this to true, the scroll view will fill the screen and the layout_alignParentBottom will start to function as expected:&lt;/p&gt;

&lt;div id=&quot;scid:9D7513F9-C04C-4721-824A-2B34F0212519:f603d778-3b3b-4899-885d-9755abd00899&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px&quot;&gt;
  &lt;pre style=&quot; width: 548px; height: 227px;background-color:White;overflow: auto;&quot;&gt;&lt;div&gt;
  &lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;
  
  &lt;span style=&quot;color: #000000;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;ScrollView xmlns:android&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
      android:layout_width&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;fill_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
      android:layout_height&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;fill_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
      android:background&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;@color/white&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
      android:fillViewport&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
  
  ... 
  
  &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;ScrollView&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; 
  
  &lt;/span&gt;
&lt;/div&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&amp;lt;/div&amp;gt; 
    
    &lt;p&gt;
      &amp;nbsp;
    &lt;/p&gt;
    
    &lt;p&gt;
      &lt;strong&gt;2. When I use async/await in my code the execution will fall through to other methods that require data that hasn&amp;#8217;t been intialised yet. Is there anyway to signal in an async/await scenario?&lt;/strong&gt;
    &lt;/p&gt;
    
    &lt;p&gt;
      I first witnessed this kind of scenario when I needed to use async/await in my &lt;strong&gt;&lt;em&gt;OnActivityResult&lt;/em&gt;&lt;/strong&gt; methods. In my examples I had started an activity and when I returned I needed to load data to be used in the layout. As soon as I used await the execution would fall through to the OnRestart/OnResume and if I wanted to use a single set of logic in these methods to display data I was in trouble. Bear in mind that with some re-organisation of my code and where I do my filling of controls I could probably minimise the impact of this issue but this example is being used to show the problem more clearly.
    &lt;/p&gt;
    
    &lt;div id=&quot;scid:9D7513F9-C04C-4721-824A-2B34F0212519:4ad5ea4c-0f10-4fd5-883c-6f709417dc3b&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px&quot;&gt;
      &lt;pre style=&quot; width: 708px; height: 173px;background-color:White;overflow: auto;&quot;&gt;&lt;div&gt;
  &lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;
  
  &lt;span style=&quot;color: #000000;&quot;&gt;async &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;override&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; OnActivityResult(&lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; requestCode, Result resultCode, Intent data)
  {
      &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;base&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.OnActivityResult(requestCode, resultCode, data);
  
      &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; itemId &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; data.GetStringExtra(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;ItemId&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
      _item &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; await ItemHelper.GetItem(itemId);
  }&lt;/span&gt;
&lt;/div&gt;&lt;/pre&gt;
      
      &lt;p&gt;
        &lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&amp;lt;/div&amp;gt; 
        
        &lt;p&gt;
          In the following code in my &lt;strong&gt;&lt;em&gt;OnResume&lt;/em&gt;&lt;/strong&gt; I am setting a text edit to the item description:
        &lt;/p&gt;
        
        &lt;div id=&quot;scid:9D7513F9-C04C-4721-824A-2B34F0212519:b825257c-4b77-4a8c-b6f8-8b6b745cadbb&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px&quot;&gt;
          &lt;pre style=&quot; width: 538px; height: 194px;background-color:White;overflow: auto;&quot;&gt;&lt;div&gt;
  &lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;
  
  &lt;span style=&quot;color: #0000FF;&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;override&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; OnResume()
  {
      &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;base&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.OnResume();
  
      &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; I'm in trouble here because the item hasn't actually
      &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; been retrieved yet.&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
  &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;    _itemTextEdit.Text &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; _item.Description;
  }
  &lt;/span&gt;
&lt;/div&gt;&lt;/pre&gt;
          
          &lt;p&gt;
            &lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&amp;lt;/div&amp;gt;
          &lt;/p&gt;
          
          &lt;p&gt;
            In normal threading situations I would have usually used something like an &lt;strong&gt;&lt;em&gt;AutoResetEvent&lt;/em&gt;&lt;/strong&gt;&amp;nbsp; to signal the logic that it is now ready to load but in the async/await world I needed something a little more appropriate. Enter &lt;strong&gt;&lt;em&gt;TaskCompletionStatus&lt;/em&gt;&lt;/strong&gt;. For more information on this bad boy please have a look at &lt;a href=&quot;http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx?Redirected=true&quot;&gt;Stephen Toub’s article&lt;/a&gt; on MSDN. The nuts and bolts of it are that I can await on this in my &lt;strong&gt;OnResume &lt;/strong&gt;and signal for it to continue once I have actually loaded the data it needs. The code for the &lt;strong&gt;&lt;em&gt;OnActivityResult&lt;/em&gt;&lt;/strong&gt; ends up looking like this:
          &lt;/p&gt;
          
          &lt;div id=&quot;scid:9D7513F9-C04C-4721-824A-2B34F0212519:913fccb4-60b3-49c3-bdea-125e71886398&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px&quot;&gt;
            &lt;pre style=&quot; width: 528px; height: 370px;background-color:White;overflow: auto;&quot;&gt;&lt;div&gt;
  &lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;
  
  &lt;span style=&quot;color: #0000FF;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; TaskCompletionSource&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; _taskCompletionSource &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; TaskCompletionSource&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;();
  
  async &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;override&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; OnActivityResult(&lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; requestCode, Result resultCode, Intent data)
  {
      &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;base&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.OnActivityResult(requestCode, resultCode, data);
  
      _taskCompletionSource &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; TaskCompletionSource&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;object&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;();
  
      &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; itemId &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; data.GetStringExtra(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;ItemId&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
      _item &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; await ItemHelper.GetItem(itemId);
      
      &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; Set the result and signal any async code awaiting
      &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; on the TaskCompletionSource&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
  &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;    _taskCompletionSource.SetResult(&lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
  }&lt;/span&gt;
&lt;/div&gt;&lt;/pre&gt;
            
            &lt;p&gt;
              &lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&amp;lt;/div&amp;gt; 
              
              &lt;p&gt;
                The &lt;strong&gt;&lt;em&gt;OnResume&lt;/em&gt;&lt;/strong&gt;&amp;nbsp; is changed to include an await to prevent it from running until the data is ready:
              &lt;/p&gt;
              
              &lt;div id=&quot;scid:9D7513F9-C04C-4721-824A-2B34F0212519:796052f9-f779-4096-80f1-d7f65c096566&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px&quot;&gt;
                &lt;pre style=&quot; width: 528px; height: 255px;background-color:White;overflow: auto;&quot;&gt;&lt;div&gt;
  &lt;!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;
  
  &lt;span style=&quot;color: #0000FF;&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;override&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; OnResume()
  {
      &lt;/span&gt;&lt;span style=&quot;color: #0000FF;&quot;&gt;base&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.OnResume();
  
      &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; The execution will wait here until SetResult
      &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; is called.&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
  &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;    await _taskCompletionSource.Task;
  
      _itemTextEdit.Text &lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; _item.Description;
  }&lt;/span&gt;
&lt;/div&gt;&lt;/pre&gt;
                
                &lt;p&gt;
                  &lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&amp;lt;/div&amp;gt; 
                  
                  &lt;p&gt;
                    As I am exclusively using async/await the UI will continue to run without blocking but now the logic won’t attempt to update my controls until the data is ready.
                  &lt;/p&gt;
                  
                  &lt;p&gt;
                    As I said, this problem could probably be addressed by reorganising where the data retrieval is performed but it still demonstrates a strategy that could potentially be utilised in a variety of scenarios.
                  &lt;/p&gt;
                  
                  &lt;p&gt;
                    &amp;nbsp;
                  &lt;/p&gt;
                  
                  &lt;p&gt;
                    &lt;strong&gt;3. All of a sudden when I use a map fragment in my application the map loads with a grey screen. It was working before, what is going on?&lt;/strong&gt;
                  &lt;/p&gt;
                  
                  &lt;p&gt;
                    I have seen this weirdness a few times and it seems to be a permission problem. I originally found the answer in this &lt;a href=&quot;http://forums.xamarin.com/discussion/comment/25330/#Comment_25330&quot;&gt;post by Ryan Langton&lt;/a&gt; on the Xamarin forums.
                  &lt;/p&gt;
                  
                  &lt;p&gt;
                    The crux of it is that when you change the properties of your AppManifest.xml using the property pages in Visual Studio, sometimes some strange stuff can happen to your xml and your maps will start showing up as blank.
                  &lt;/p&gt;
                  
                  &lt;p&gt;
                    I simply made sure my &lt;strong&gt;&lt;em&gt;AndroidManifest.xml &lt;/em&gt;&lt;/strong&gt;looked something like the following an everything starts working again:
                  &lt;/p&gt;
                  
                  &lt;blockquote&gt;
                    &lt;p&gt;
                      &lt;font size=&quot;2&quot;&gt;&lt;?xml version=&amp;#8221;1.0&amp;#8243; encoding=&amp;#8221;utf-8&amp;#8243;?&gt;&lt;br /&gt;&amp;lt;manifest xmlns:android=&amp;#8221;&lt;/font&gt;&lt;a href=&quot;http://schemas.android.com/apk/res/android&amp;quot;&quot;&gt;&lt;font size=&quot;2&quot;&gt;http://schemas.android.com/apk/res/android&amp;#8221;&lt;/font&gt;&lt;/a&gt;&lt;font size=&quot;2&quot;&gt; android:installLocation=&amp;#8221;auto&amp;#8221; package=&amp;#8221;au.com.company.someApp&amp;#8221; android:versionCode=&amp;#8221;3&amp;#8243; android:versionName=&amp;#8221;1.2&amp;#8243;&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;uses-sdk android:targetSdkVersion=&amp;#8221;14&amp;#8243; android:minSdkVersion=&amp;#8221;14&amp;#8243; /&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;android.permission.CAMERA&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!&amp;#8211; Google Maps for Android v2 requires OpenGL ES v2 &amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;uses-feature android:glEsVersion=&amp;#8221;0x00020000&amp;#8243; android:required=&amp;#8221;true&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;permission&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:name=&amp;#8221;au.com.company.someApp.permission.MAPS_RECEIVE&amp;#8221;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:protectionLevel=&amp;#8221;signature&amp;#8221;/&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;au.com.company.someApp.permission.MAPS_RECEIVE&amp;#8221;/&amp;gt;&amp;nbsp; &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!&amp;#8211; We need to be able to download map tiles and access Google Play Services&amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;android.permission.INTERNET&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;!&amp;#8211; Allow the application to access Google web-based services. &amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;com.google.android.providers.gsf.permission.READ_GSERVICES&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;!&amp;#8211; Google Maps for Android v2 will cache map tiles on external storage &amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;android.permission.WRITE_EXTERNAL_STORAGE&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;!&amp;#8211; Google Maps for Android v2 needs this permission so that it may check the connection state as it must download data &amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;android.permission.ACCESS_NETWORK_STATE&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;!&amp;#8211; These are optional, but recommended. They will allow Maps to use the My Location provider. &amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;android.permission.ACCESS_COARSE_LOCATION&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;uses-permission android:name=&amp;#8221;android.permission.ACCESS_FINE_LOCATION&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;application android:label=&amp;#8221;@string/app_name&amp;#8221;&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!&amp;#8211; Put your Google Maps V2 API Key here. This key will not work for you.&amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!&amp;#8211; See &lt;/font&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/android/start#obtaining_an_api_key&quot;&gt;&lt;font size=&quot;2&quot;&gt;https://developers.google.com/maps/documentation/android/start#obtaining_an_api_key&lt;/font&gt;&lt;/a&gt;&lt;font size=&quot;2&quot;&gt; &amp;#8211;&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta-data android:name=&amp;#8221;com.google.android.maps.v2.API_KEY&amp;#8221; android:value=&amp;#8221;&lt;ENTER API=&quot;&quot; KEY=&quot;&quot; HERE=&quot;&quot;&gt;&amp;#8221; /&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/application&amp;gt;&lt;br /&gt;&amp;lt;/manifest&amp;gt;&amp;lt;/font&amp;gt;
                    &amp;lt;/p&amp;gt;
                  &amp;lt;/blockquote&amp;gt;
                  
                  &lt;p&gt;
                    I don’t know why this happens but fixing the xml manually has sorted it for me several times.
                  &lt;/p&gt;
&lt;/ENTER&gt;&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>slamb2k</name>
        
        
      </author>

      

      
        <category term="Android" />
      
        <category term="xamarin" />
      

      
        <summary type="html">Welcome to another installment in my series exploring the specific problems that nearly beat me this week. I write these on Sunday night after a huge week of balancing my work and fatherly responsibilities so I hope they make sense…</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Xamarin and Android – Specific Solutions to Specific Problems #2</title>
      <link href="/xamarin-and-android-specific-solutions-to-specific-problems-2/" rel="alternate" type="text/html" title="Xamarin and Android – Specific Solutions to Specific Problems #2" />
      <published>2013-09-09T08:36:03+02:00</published>
      <updated>2013-09-09T08:36:03+02:00</updated>
      <id>/xamarin-and-android-specific-solutions-to-specific-problems-2</id>
      <content type="html" xml:base="/xamarin-and-android-specific-solutions-to-specific-problems-2/">&lt;p&gt;Welcome to the second post in my &lt;strong&gt;&lt;em&gt;Specific Solutions to Specific Problems&lt;/em&gt;&lt;/strong&gt; series. Hopefully somebody is getting some benefit out of these but even if nobody is reading it, the process is pretty cathartic anyway…&lt;/p&gt;

&lt;p&gt;These are a handful of issues that I encountered in my second week on Monodroid. These are the solutions I discovered to my problems.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;1. When I am loading a ListView, how do I show a loading message before I actually fill the element with items?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s a few ways to do this. One choice is to use an entirely different list adapter while loading which will give you the most control over the look and feel of the UI elements. The other solution which I use regularly is to use the android-empty-id-view and set the list view source to an empty list while loading.&lt;/p&gt;

&lt;p&gt;The list view and associated empty view look like the following. Remember to set the visibility of the empty view element to &lt;strong&gt;&lt;em&gt;gone&lt;/em&gt;&lt;/strong&gt;. Android will take care of showing or hiding the element at the correct times:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[syntax type=”html&lt;/td&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;js&lt;/td&gt;
      &lt;td&gt;css”]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&amp;lt;ListView android:id=”@+id/drugs_list” android:layout_width=”fill_parent” android:layout_below=”@+id/patientName” android:layout_height=”wrap_content” /&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;TextView android:id=”@+id/empty” android:text=”No drugs found” android:layout_width=”fill_parent” android:layout_height=”120dp” android:layout_below=”@+id/patientName” android:gravity=”center” android:visibility=”gone” /&amp;gt;&lt;/p&gt;

&lt;p&gt;[/syntax]&lt;/p&gt;

&lt;p&gt;In order to show the empty view I simply assign the list adapter with an empty collection. This will cause Android to show the empty view with the text “Loading items…”:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[syntax type=”html&lt;/td&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;js&lt;/td&gt;
      &lt;td&gt;css”]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;var itemsList = FindViewById&lt;ListView&gt;(Resource.Id.items_list);&lt;/ListView&gt;&lt;/p&gt;

&lt;p&gt;var emptyTextView = FindViewById&lt;TextView&gt;(Resource.Id.empty);&lt;/TextView&gt;&lt;/p&gt;

&lt;p&gt;emptyTextView.Text = “Loading items…”;&lt;/p&gt;

&lt;p&gt;itemsList.EmptyView = _emptyTextView;&lt;/p&gt;

&lt;p&gt;itemsList.Adapter = new MyListAdapter(this, new List&lt;Item&gt;());&lt;/Item&gt;&lt;/p&gt;

&lt;p&gt;// Perform some long running operation to get items&lt;/p&gt;

&lt;p&gt;var items = await ItemService.GetAllItems();&lt;/p&gt;

&lt;p&gt;itemsList.Adapter = new MyListAdapter(this, items);&lt;/p&gt;

&lt;p&gt;// Set empty to no drugs in case items.Count == 0&lt;/p&gt;

&lt;p&gt;emptyTextView.Text = “No items found”;&lt;/p&gt;

&lt;p&gt;[/syntax]&lt;/p&gt;

&lt;p&gt;After I execute my long running operation to retrieve the data I set adapter again with the new collection. I also set the empty view message to be “No items found” so if necessary the system can actually show the existence of an empty view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Every time I debug or deploy my application from Visual Studio I lose all of the application state on the device. How do I deploy without losing my state?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The application we are developing stores state in an SQL Lite database. Every time I debugged or deployed the application, the state would be wiped and the program would insist it was being run for the first time. In order to tell Xamarin to not wipe the state every time I checked the following option under &lt;strong&gt;&lt;em&gt;Tools &amp;gt; Options &amp;gt; Xamarin &amp;gt; Android Settings:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i0.wp.com/welltechnically.com/wp-content/uploads/2013/09/fastdeploy.png&quot;&gt;&lt;img src=&quot;https://i2.wp.com/welltechnically.com/wp-content/uploads/2013/09/fastdeploy-300x174.png?resize=300%2C174&quot; alt=&quot;fastdeploy&quot; class=&quot;alignnone size-medium wp-image-3151&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;{.lightbox}&lt;/p&gt;

&lt;p&gt;Once this setting is checked the application state won’t be reset between debugging sessions. In order to reset the state I simply uninstall the app and the next deployment will have a fresh start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. I seem to be using the exact same code everywhere to show a progress dialog. Can I work some lambda and func magic so I can have a reusable piece of logic that I call throughout the application?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No problem. I have created a static function that returns a Task so I can await on it. It takes the alert title, the message and an awaitable Func representing the long running operation.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[syntax type=”html&lt;/td&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;js&lt;/td&gt;
      &lt;td&gt;css”]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;async public static Task ShowProgressDialog(Context context, string title, string message, Func func)&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;using (ProgressDialog progressDialog = ProgressDialog.Show(context, title, message, true))&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;try&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;await func.Invoke();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;finally&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;// Now hide the progress dialog&lt;/p&gt;

&lt;p&gt;progressDialog.Dismiss();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/syntax]&lt;/p&gt;

&lt;p&gt;I would then call this like so:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[syntax type=”html&lt;/td&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;js&lt;/td&gt;
      &lt;td&gt;css”]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;await AppHelper.ShowProgressDialog(this,&lt;/p&gt;

&lt;p&gt;“Please wait…”,&lt;/p&gt;

&lt;p&gt;“Logging in…”,&lt;/p&gt;

&lt;p&gt;async () =&amp;gt; await auth.LoginUser(authInfo));&lt;/p&gt;

&lt;p&gt;[/syntax]&lt;/p&gt;

&lt;p&gt;I use this throughout the application and there is no need to repeat the same boiler plate code everywhere I want to show a progress dialog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. When I use a custom theme to change the window title any progress dialogs I create look like they have no theme applied. How can I force a progress dialog to use a specific theme?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have several activities where I have re-defined the style to have a custom title bar. When I show a progress dialog from these activities the dialog will not be Holo and instead appear as if no theme has been applied. I found several posts that suggested the use of a &lt;strong&gt;&lt;em&gt;ContextThemeWrapper&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[syntax type=”html&lt;/td&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;js&lt;/td&gt;
      &lt;td&gt;css”]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Context dialogContext = new ContextThemeWrapper(this, AlertDialog.ThemeHoloDark);&lt;/p&gt;

&lt;p&gt;ProgressDialog dialog = ProgressDialog.Show(dialogContext, “Important…”, “Logging in…”, true);&lt;/p&gt;

&lt;p&gt;[/syntax]&lt;/p&gt;

&lt;p&gt;I couldn’t get this to work as expected however and instead I had to instantiate a ProgressDialog as the constructor allows for the specification of a theme. When I updated the static method I had created earlier, it looked like this:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[syntax type=”html&lt;/td&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;js&lt;/td&gt;
      &lt;td&gt;css”]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;async public static Task ShowProgressDialog(Context context, string title, string message, Func&lt;Task&gt; func)&lt;/Task&gt;&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;using (ProgressDialog progressDialog = new ProgressDialog(context, AlertDialog.ThemeHoloDark))&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;progressDialog.Indeterminate = true;&lt;/p&gt;

&lt;p&gt;progressDialog.SetTitle(title);&lt;/p&gt;

&lt;p&gt;progressDialog.SetMessage(message);&lt;/p&gt;

&lt;p&gt;progressDialog.Show();&lt;/p&gt;

&lt;p&gt;try&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;await func.Invoke();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;finally&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;// Now hide the progress dialog&lt;/p&gt;

&lt;p&gt;progressDialog.Dismiss();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/syntax]&lt;/p&gt;

&lt;p&gt;The progress dialog now has the Holo Dark theme applied to it everywhere in the application that I use this function from.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>slamb2k</name>
        
        
      </author>

      

      
        <category term="Android" />
      
        <category term="xamarin" />
      

      
        <summary type="html">Welcome to the second post in my Specific Solutions to Specific Problems series. Hopefully somebody is getting some benefit out of these but even if nobody is reading it, the process is pretty cathartic anyway…</summary>
      

      
      
    </entry>
  
</feed>
