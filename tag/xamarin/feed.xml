<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/xamarin/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2019-01-09T23:10:22+01:00</updated>
  <id>/tag/xamarin/feed.xml</id>

  
  
  

  
    <title type="html">Kym’s Blog | </title>
  

  
    <subtitle>I write about Azure, Xamarin.Forms, Connected Apps and whatever else might be on my mind.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Microsoft //Build/ Recap for Xamarin Developers</title>
      <link href="/5907-2/" rel="alternate" type="text/html" title="Microsoft //Build/ Recap for Xamarin Developers" />
      <published>2018-05-17T13:16:31+02:00</published>
      <updated>2018-05-17T13:16:31+02:00</updated>
      <id>/build-recap-for-xamarin-developers</id>
      <content type="html" xml:base="/5907-2/">&lt;p&gt;I presented a session on all the imprortant stuff from Microsoft //Build/ for Xamarin Developers at the Melbourne Xamarin User Group yesterday. Just sharing out the links from the session.&lt;/p&gt;

&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/97354210&quot; width=&quot;700&quot; height=&quot;574&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The slides are available over at &lt;a href=&quot;https://www.slideshare.net/kphillpotts/microsoft-build-recap-for-xamarin-developers&quot;&gt;SlideShare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links to all the gory details are over at &lt;a href=&quot;https://aka.ms/XamBuild2018&quot;&gt;https://aka.ms/XamBuild2018&lt;/a&gt; and included below. (saved you a click)&lt;/p&gt;

&lt;h2 id=&quot;general-recaps-tldr-versions&quot;&gt;General Recaps (tl;dr versions)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.xamarin.com/xamarin-build-2018/&quot;&gt;All Things Xamarin at Build 2018 – Xamarin Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.xamarin.com/podcast-build-2018-recap-mobile-developers/&quot;&gt;Xamarin Podcast – Build 2018 Recap for Mobile Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Build/2018&quot;&gt;Recordings of all Build Sessions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Build/2018?sort=status&amp;amp;direction=desc&amp;amp;c=BMinnick&amp;amp;c=david-ortinau&amp;amp;c=james-montemagno&amp;amp;c=jim-bennett&amp;amp;c=jordan%2Bmatthiesen&amp;amp;c=Laurent-Bugnion&amp;amp;c=matt-soucoup&amp;amp;c=Miguel-de-Icaza&amp;amp;c=mikayla-hutchinson&amp;amp;c=Scott-Guthrie&amp;amp;c=simina-pasat&amp;amp;term=&quot;&gt;Xamarin Focused Sessions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tooling&quot;&gt;Tooling&lt;/h2&gt;

&lt;h4 id=&quot;xamarin-tools-for-visual-studio-pc&quot;&gt;Xamarin Tools for Visual Studio (PC)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.xamarin.com/new-xamarin-android-ios-templates/&quot;&gt;Updated iOS and Android Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/xamarin-device-manager&quot;&gt;Xamarin.Android Device Manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes#android-auto-sdk&quot;&gt;Improved Android SDK Management&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.xamarin.com/automatic-provisioning-visual-studio-2017/&quot;&gt;Automatic iOS Device Provisioning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.xamarin.com/new-xamarin-forms-xaml-intellisense-visual-studio-2017/&quot;&gt;Intellisense Improvements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visual-studio-for-mac&quot;&gt;Visual Studio for Mac&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2018/05/07/visual-studio-for-mac-version-7-5-and-beyond/&quot;&gt;Visual Studio For Mac Improvements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes&quot;&gt;Visual Studio For Mac Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visual-studio-live-share&quot;&gt;Visual Studio Live Share&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/services/live-share/&quot;&gt;Live Share web site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;intellicode&quot;&gt;IntelliCode&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/services/intellicode/&quot;&gt;IntelliCode web site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hyper-v-android-emulators&quot;&gt;Hyper-V Android Emulators&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2018/05/08/hyper-v-android-emulator-support/&quot;&gt;Visual Studio Blog Post – Hyper-V Android Emulator Support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration&quot;&gt;Android Emulator Hardware Acceleration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;xamarin-live-reload&quot;&gt;Xamarin Live Reload&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/xaml/live-reload&quot;&gt;Xamarin Live Reload Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;xamarin-essentials&quot;&gt;Xamarin Essentials&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/essentials/&quot;&gt;Get Started Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xamarin/Essentials&quot;&gt;Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xamarinforms-30&quot;&gt;Xamarin.Forms 3.0&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/releases/xamarin-forms/xamarin-forms-3.0/3.0.0/&quot;&gt;Release Notes – List of fixes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/davidortinau/flexibility&quot;&gt;Flexibility Sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/ConferenceVision&quot;&gt;Build Conference Vision Sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visual-state-manager&quot;&gt;Visual State Manager&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/xamarin/xamarin-forms/user-interface/visual-state-manager&quot;&gt;Visual State Manager Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://university.xamarin.com/lightninglectures/xamarin-forms-30-visual-state-manager&quot;&gt;Xamarin University Lightning Lecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;flexlayout&quot;&gt;FlexLayout&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/xamarin/xamarin-forms/user-interface/layouts/flex-layout&quot;&gt;FlexLayout Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://university.xamarin.com/lightninglectures/xamarin-forms-30-flex-layout&quot;&gt;Xamarin University Lightning Lecture – FlexLayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;css-styling&quot;&gt;CSS Styling&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/xamarin/xamarin-forms/user-interface/styles/css&quot;&gt;CSS Styling Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://university.xamarin.com/lightninglectures/xamarin-forms-30-css&quot;&gt;Xamarin University Lightning Lecture – CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;right-to-left-support&quot;&gt;Right-To-Left Support&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/localization/right-to-left&quot;&gt;Right-To-Left Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.xamarin.com/right-to-left-localization-xamarin-forms/&quot;&gt;Xamarin Blog Post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://university.xamarin.com/lightninglectures/xamarin-forms-30-right-to-left&quot;&gt;Xamarin University Lightning Lecture – Right-To-Left&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;wpf-support&quot;&gt;WPF Support&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/xamarin/xamarin-forms/platform/wpf&quot;&gt;WPF Support Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://university.xamarin.com/lightninglectures/xamarin-forms-30-wpf&quot;&gt;Xamarin University Lightning Lecutre – WPF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;f100-contributions&quot;&gt;F100 Contributions&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xamarin/Xamarin.Forms/projects/5?card_filter_query=label%3Af100&quot;&gt;F100 Project Board – Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-interesting-things&quot;&gt;Other Interesting Things&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/build/announcements/&quot;&gt;All The Azure Announcements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.windows.com/buildingapps/2018/05/07/a-new-microsoft-store-revenue-share-is-coming/&quot;&gt;New Revenue Share Q&amp;amp;A&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/vsappcenter/microsoft-and-github-present-an-integrated-continuous-integration-and-delivery-solution-for-mobile/&quot;&gt;Visual Studio App Center and Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pumpingco.de/blog/14317/&quot;&gt;Developer Centric Annoucements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build-tour&quot;&gt;Build Tour&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://insiderdevtour.com/&quot;&gt;Insider Dev Tour&lt;/a&gt; – Catch up with the a day of build recap&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">I presented a session on all the imprortant stuff from Microsoft //Build/ for Xamarin Developers at the Melbourne Xamarin User Group yesterday. Just sharing out the links from the session.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Simple Animation with Xamarin.Forms</title>
      <link href="/simple-animation-with-xamarin-forms/" rel="alternate" type="text/html" title="Simple Animation with Xamarin.Forms" />
      <published>2018-03-27T14:43:50+02:00</published>
      <updated>2018-03-27T14:43:50+02:00</updated>
      <id>/simple-animation-with-xamarin-forms</id>
      <content type="html" xml:base="/simple-animation-with-xamarin-forms/">&lt;p&gt;Those of you know me (or have visited my blog) know that I love playing around with Xamarin.Forms Layouts.   Recently, Matt Soucoup was on the &lt;a href=&quot;https://www.youtube.com/watch?v=ypKnAKJL9CA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin Show talking about Animations&lt;/a&gt;. He showed how easy it is to do simple animations in Xamarin Forms. Personally, I don’t think developers do enough with animations – they can really spice up your UI and show your users how much you care.&lt;/p&gt;

&lt;p&gt;I thought it might be fun to use some of the stuff that Matt was talking about and put it into a more real world context.&lt;/p&gt;

&lt;p&gt;I also came across an excellent blog post &lt;a href=&quot;https://android.jlelse.eu/build-awesome-animations-with-7-lines-of-code-using-constraintlayout-854e8fd3ad93&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Build awesome animations with 7 lines of code using ConstraintLayout&lt;/a&gt; which is great if you are doing Android development. So just for giggles, I thought I might reproduce that animations in Xamarin Forms – It took slightly more than 7 lines, but having said that, it also works cross platform.&lt;/p&gt;

&lt;p&gt;The animation itself, is very simple and looks a lot like this:&lt;/p&gt;

&lt;div style=&quot;width: 286px;&quot; class=&quot;wp-video&quot;&gt;
  &lt;!--[if lt IE 9]&gt;&lt;![endif]--&gt;&lt;video class=&quot;wp-video-shortcode&quot; id=&quot;video-5879-1&quot; width=&quot;286&quot; height=&quot;508&quot; preload=&quot;metadata&quot; controls=&quot;controls&quot;&gt;&lt;source type=&quot;video/mp4&quot; src=&quot;http://www.kymphillpotts.com/wp-content/uploads/2018/03/android-50.mp4?_=1&quot; /&gt;
  
  &lt;a href=&quot;http://www.kymphillpotts.com/wp-content/uploads/2018/03/android-50.mp4&quot;&gt;http://www.kymphillpotts.com/wp-content/uploads/2018/03/android-50.mp4&lt;/a&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;and on iOS, like this:&lt;/p&gt;

&lt;div style=&quot;width: 286px;&quot; class=&quot;wp-video&quot;&gt;
  &lt;video class=&quot;wp-video-shortcode&quot; id=&quot;video-5879-2&quot; width=&quot;286&quot; height=&quot;512&quot; preload=&quot;metadata&quot; controls=&quot;controls&quot;&gt;&lt;source type=&quot;video/mp4&quot; src=&quot;http://www.kymphillpotts.com/wp-content/uploads/2018/03/ios-50-1.mp4?_=2&quot; /&gt;&lt;a href=&quot;http://www.kymphillpotts.com/wp-content/uploads/2018/03/ios-50-1.mp4&quot;&gt;http://www.kymphillpotts.com/wp-content/uploads/2018/03/ios-50-1.mp4&lt;/a&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;So how do we go about doing something like that?&lt;/p&gt;

&lt;h3 id=&quot;the-page-layout&quot;&gt;The Page Layout&lt;/h3&gt;

&lt;pre class=&quot;lang:xml decode:true&quot;&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&amp;lt;ContentPage x:Class=&quot;Animation.AnimationPage&quot; xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot; xmlns:local=&quot;clr-namespace:Animation&quot; xmlns:views=&quot;clr-namespace:Animation.Views&quot; BackgroundColor=&quot;#181818&quot;&amp;gt;

    &amp;lt;Grid Padding=&quot;0&quot; ColumnSpacing=&quot;0&quot; RowSpacing=&quot;0&quot;&amp;gt;
        &amp;lt;Grid.RowDefinitions&amp;gt;
            &amp;lt;RowDefinition Height=&quot;*&quot; /&amp;gt;
            &amp;lt;RowDefinition Height=&quot;AUTO&quot; /&amp;gt;
        &amp;lt;/Grid.RowDefinitions&amp;gt;

        &amp;lt;Image x:Name=&quot;MainImage&quot; Grid.Row=&quot;0&quot; Grid.RowSpan=&quot;2&quot; Aspect=&quot;AspectFill&quot; Source=&quot;mugello.jpg&quot;&amp;gt;
            &amp;lt;Image.GestureRecognizers&amp;gt;
                &amp;lt;TapGestureRecognizer NumberOfTapsRequired=&quot;1&quot; Tapped=&quot;Handle_Tapped&quot; /&amp;gt;
            &amp;lt;/Image.GestureRecognizers&amp;gt;
        &amp;lt;/Image&amp;gt;

        &amp;lt;views:ExpandBar x:Name=&quot;ExpandBar&quot; Grid.Row=&quot;1&quot; Padding=&quot;0&quot; TranslationY=&quot;1&quot; VerticalOptions=&quot;End&quot; /&amp;gt;

        &amp;lt;views:DescriptionPane x:Name=&quot;BottomFrame&quot; Grid.Row=&quot;1&quot; IsVisible=&quot;true&quot; Text=&quot;The Mugello is a historic region and valley in northern Tuscany, in Italy. It is located to the north of the city of Florence and consists of the northernmost portion of the Metropolitan City of Florence.  It is connected to the separate Santerno river valley by the Futa Pass.&quot; VerticalOptions=&quot;End&quot; /&amp;gt;

        &amp;lt;views:Title x:Name=&quot;Title&quot; Grid.Row=&quot;0&quot; Margin=&quot;0,40,0,0&quot; HorizontalOptions=&quot;Start&quot; VerticalOptions=&quot;Start&quot; /&amp;gt;
    &amp;lt;/Grid&amp;gt;
&amp;lt;/ContentPage&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nothing too exciting happening here. Just a ContentPage with a grid inside with a few overlapped elements. I’ve made put each element that will be animated into a ContentView so that I can move all it’s sub elements by just controlling the animations on the ContentViews. There is also a GestureRecognizer on the Image which is actually going to trigger the animations.&lt;/p&gt;

&lt;p&gt;As an aside, I used grids to lay this out (because I loves me some grids), but if you were a fan of AbsoluteLayout you could probably achieve the same result with that.&lt;/p&gt;

&lt;h3 id=&quot;the-animation-logic&quot;&gt;The Animation Logic&lt;/h3&gt;

&lt;p&gt;We can achieve the results we are after with just some very simple inbuilt Xamarin.Forms animations, specifically we use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;LayoutTo&lt;/strong&gt; to adjust the bounds of the Image (to make it expand and shrink)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TranslateTo&lt;/strong&gt; to slide elements around&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FadeTo&lt;/strong&gt; to fade opacity values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throw in some Easing on those animations to provide a nice spring effect and we are in business. Here is the code that does the animation:&lt;/p&gt;

&lt;pre class=&quot;lang:csharp decode:true&quot;&gt;void Handle_Tapped(object sender, System.EventArgs e)
{
    if (isExpanded)
        AnimateIn();
    else
        AnimateOut();

    isExpanded = !isExpanded;
}

private void AnimateIn()
{
    MainImage.LayoutTo(detailsRect, 1200, Easing.SpringOut);
    BottomFrame.TranslateTo(0, 0, 1200, Easing.SpringOut);
    Title.TranslateTo(0, 0, 1200, Easing.SpringOut);
    ExpandBar.FadeTo(.01, 250, Easing.SinInOut);
}

private void AnimateOut()
{
    MainImage.LayoutTo(expandedRect, 1200, Easing.SpringOut);
    BottomFrame.TranslateTo(0, BottomFrame.Height, 1200, Easing.SpringOut);
    Title.TranslateTo(-Title.Width, 0, 1200, Easing.SpringOut);
    ExpandBar.FadeTo(1, 250, Easing.SinInOut);
}
&lt;/pre&gt;

&lt;h3 id=&quot;starting-state&quot;&gt;Starting State&lt;/h3&gt;

&lt;p&gt;The only other bit of significant logic (and it’s not that significant) is just starting all the elements in their correct starting positions. I’ve done this on the OnSizeAllocated because then we can also handle positioning things in the correct locations on a rotation of the device. Again the code is super simple:&lt;/p&gt;

&lt;pre class=&quot;lang:csharp decode:true&quot;&gt;protected override void OnSizeAllocated(double width, double height)
{
    base.OnSizeAllocated(width, height);

    // cache the bounds for the image so I don't repeat calculations everywhere
    detailsRect = new Rectangle(0, 0, width, BottomFrame.Bounds.Top + 20);
    expandedRect = new Rectangle(0, 0, width, height);

    // move things to their starting point
    if (isExpanded)
    {
        MainImage.Layout(expandedRect);
        BottomFrame.TranslationY = BottomFrame.Height;
        Title.TranslationX = -Title.Width;
    }
    else
    {
        MainImage.Layout(detailsRect);
        BottomFrame.TranslationY = 0;
        Title.TranslationX = 0;
    }
}
&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You can achieve some pretty nice stuff with the inbuilt Xamarin.Forms animation api’s. And really this is just scratching the surface. My layout here could be much nicer with some attention to details on fonts and margins – but really I just wanted to focus in on the animations. So people, go out and add some animations to your pages!!!&lt;/p&gt;

&lt;h3 id=&quot;additional-references&quot;&gt;Additional References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://android.jlelse.eu/build-awesome-animations-with-7-lines-of-code-using-constraintlayout-854e8fd3ad93&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Build awesome animations with 7 lines of code using ConstraintLayout&lt;/a&gt; – This is a really cool technique for Android (and also the layout I blatantly copied).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://university.xamarin.com/lightninglectures/animating-xamarinforms&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Animating Xamarin.Froms Lightning Lecture at Xamarin University&lt;/a&gt; – Glenn Stephens covers off Animation in this Lightning Lecture.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ypKnAKJL9CA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin Show talking about Animations&lt;/a&gt;. Matt Soucoup gives a quick rundown of animation in Xamarin.Forms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh yeah, I almost forgot, you can go find the code over at my &lt;a href=&quot;https://github.com/kphillpotts/SimplePageAnimation&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;GitHub here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Until next time, happy coding!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">Those of you know me (or have visited my blog) know that I love playing around with Xamarin.Forms Layouts.   Recently, Matt Soucoup was on the Xamarin Show talking about Animations. He showed how easy it is to do simple animations in Xamarin Forms. Personally, I don’t think developers do enough with animations – they can really spice up your UI and show your users how much you care.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">FastScroll and SectionIndexer in Xamarin.Forms ListView</title>
      <link href="/fastscroll-and-sectionindexer-in-xamarin-forms-listview/" rel="alternate" type="text/html" title="FastScroll and SectionIndexer in Xamarin.Forms ListView" />
      <published>2018-01-18T11:12:06+01:00</published>
      <updated>2018-01-18T11:12:06+01:00</updated>
      <id>/fastscroll-and-sectionindexer-in-xamarin-forms-listview</id>
      <content type="html" xml:base="/fastscroll-and-sectionindexer-in-xamarin-forms-listview/">&lt;p&gt;Those of you who have played around with ListViews in Xamarin.Android are probably familiar with the FastScroll and SectionIndexer features.  They essentially make it really easy for users to navigate long lists by providing them with a little “handle” to quickly drag through lists, and with the SectionIndexer it also gives them a nice little popup showing where they are up to in the list.&lt;/p&gt;

&lt;p&gt;Unfortunately, this feature isn’t available in Xamarin.Forms ListViews running on Android.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-5863&quot; src=&quot;https://i1.wp.com/www.kymphillpotts.com/wp-content/uploads/2018/01/Or-is-it.jpg?resize=250%2C208&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, it actually turns out is available through an Android Platform-Specific by the name of &lt;strong&gt;SetIsFastScrollEnabled.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And it’s dead simple to use, just with a single line of code:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;syntax-container syntax-theme-base&quot;&gt;&lt;code class=&quot;syntax highlighted&quot;&gt;&amp;lt;span class=&quot;csharp&quot;&amp;gt;listView.&amp;lt;span class=&quot;function&quot;&amp;gt;On&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;operator&quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;type&quot;&amp;gt;Android&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;operator&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;().&amp;lt;span class=&quot;function&quot;&amp;gt;SetIsFastScrollEnabled&amp;lt;/span&amp;gt;(&amp;lt;span class=&quot;constant&quot;&amp;gt;true&amp;lt;/span&amp;gt;);&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once you add that code, you will get the FastScroll thumb, but as a super-duper bonus if your ListView is grouped then you also get the SectionIndexer. So now your Xamarin.Forms lists can look like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-5860&quot; src=&quot;https://i2.wp.com/www.kymphillpotts.com/wp-content/uploads/2018/01/FastScrollIndexer.gif?resize=410%2C728&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note: One thing to be aware of, in order for the FastScroll thumb to be visible, you will have to have a sufficiently large number of rows in your ListView (about 3 times as many rows as you have screen real estate for).&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/platform-features/platform-specifics/consuming/android/#Enabling_Fast_Scrolling_in_a_ListView&quot;&gt;Docs on Fast Scrolling Platform Specific&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I hope that helps, and Happy Coding!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">Those of you who have played around with ListViews in Xamarin.Android are probably familiar with the FastScroll and SectionIndexer features. Unfortunately, this feature isn't available in Xamarin.Forms ListViews running on Android, or is it?</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Xamarin Tools and Resources</title>
      <link href="/xamarin-tools-and-resources/" rel="alternate" type="text/html" title="Xamarin Tools and Resources" />
      <published>2017-08-24T01:33:01+02:00</published>
      <updated>2017-08-24T01:33:01+02:00</updated>
      <id>/xamarin-tools-and-resources</id>
      <content type="html" xml:base="/xamarin-tools-and-resources/">&lt;p&gt;As software developers we often use a scary number of Tools and Utilities to get our jobs done. Whenever you learn a new platform you also need to work out the “tools of the trade”. I recently gave a talk on the tools and resources I use to do Xamarin development, so I thought I would just share these out on a blog post.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Be warned, the list I’m going through here is by no means a complete list of the tools available – just a list of the tools that I use. If you use some other tools that you think are worth sharing with the community then shoot me an email or leave a comment.&lt;/p&gt;

&lt;p&gt;Given that much of development is not just writing code, I thought I would go through the tools that I use from concept through to supporting an app.&lt;/p&gt;

&lt;p&gt;Okay, let’s go.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 style=&quot;text-align: center;&quot;&gt;
  Design
&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;The first thing you need to know to effectively design for a platform is the rules of the platform. Here are some handy links:&lt;/p&gt;

&lt;h3 id=&quot;ios&quot;&gt;iOS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/design/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Apple Human Interface Guidelines&lt;/strong&gt;&lt;/a&gt; – These are the official apple guidelines, you should read them, however, they tend to be a little bland.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ivomynttinen.com/blog/ios-design-guidelines&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;The iOS Design Guidelines Cheatsheet&lt;/strong&gt; by Ivo Mynttinen&lt;/a&gt; – This is a much quicker, easier place to check out information about icons, fonts, iconography and design resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt;

&lt;p&gt;Android has come a long way in it’s design guidelines. It used to be all over the shop, but now things are much nicer.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/design/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Android Design Guidelines&lt;/strong&gt;&lt;/a&gt; – All the juicy guidance from google.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://material.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Material Design&lt;/strong&gt;&lt;/a&gt; – I find the Material Design website surprisingly bland and nasty to use, however, it does have some great resources, including all the &lt;a href=&quot;https://material.io/icons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;icons&lt;/a&gt;, The design &lt;a href=&quot;https://material.io/guidelines/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;guidelines&lt;/a&gt;, a nifty &lt;a href=&quot;https://material.io/color/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;color tool&lt;/a&gt;, a handy reference for &lt;a href=&quot;https://material.io/devices/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;devices sizes and resolutions&lt;/a&gt; and other handy tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uwp&quot;&gt;UWP&lt;/h3&gt;

&lt;p&gt;Let’s not forget Universal Windows apps.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/windows/apps/design&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UWP Design Guidelines&lt;/a&gt;&lt;/strong&gt; – covers off everything you need to know to effectively design UWP apps, along with links into the new fancy pants &lt;a href=&quot;https://fluent.microsoft.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fluid Design Language&lt;/a&gt;. They also have some really great advice for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/porting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;porting applications from different platforms across to UWP&lt;/a&gt;.  One of the nice sections is a handy table which maps &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/porting/android-ios-uwp-map&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android and IOS concepts across to UWP.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design-is-a-process&quot;&gt;Design is a process&lt;/h3&gt;

&lt;p&gt;I think one of the most underrated parts of developing an application is the process of going from a sketch through wire-framing to mock-ups and prototyping. The first thing I like to do when starting a design is seek inspiration. There are a bunch of great places you can go to get your brain juices flowing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dribbble.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Dribbble&lt;/strong&gt;&lt;/a&gt; – This is probably my default go-to place for looking at beautiful UI and interaction designs.  So many talented people contribute designs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.behance.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Behance&lt;/strong&gt;&lt;/a&gt; –  Another location for our hipster designer friends to submit their goods.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://inspired-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Inspired UI&lt;/strong&gt;&lt;/a&gt; – A categorised selection of mobile designs. It has sections for iOS, iPad and Android.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://collectui.com/designs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;CollectUI&lt;/strong&gt;&lt;/a&gt; – Another categorised selection of design inspirations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.mobile-patterns.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mobile Patterns&lt;/a&gt;&lt;/strong&gt; – Yet another set of mobile design inspirations. Also has sections for iOS and Android.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pttrns.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Pttrns&lt;/strong&gt;&lt;/a&gt; – Mobile designs. This has sections for iPhone, iPad, Watch and Android.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://snppts.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Snppts&lt;/strong&gt;&lt;/a&gt; – Xamarin Forms UI Snippets.  This is a great site to look at if you are interested to see how other devs layout their Xamarin Forms pages, it has links to source code and XAML.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next it’s on to the actual process.&lt;/p&gt;

&lt;p&gt;For me, I like to start sketching on paper, I find this a very fast and adaptive way of designing the flow of applications. I personally use stencils for different device types that I print out from &lt;a href=&quot;https://www.interfacesketch.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Interface Sketch.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I have an idea on paper I will move through to formalising the wire-frames and mock-ups, my tools of choice are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://balsamiq.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Balsamiq&lt;/strong&gt;&lt;/a&gt; – This is an unapologetically simple drawing tool for quick wire-frames an mock-ups. It deliberately tries to avoid representing a finished application. The reason for this is simple: If you want to get feedback on the basic wire-frame of an app and you give someone a colourised “realistic” looking design, they will probably spend a bunch of time telling you about what’s wrong with your font and colour choices as opposed to telling you what you really want to know – does this app flow nicely and represent the information in usable fashion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next it’s on to more of the Mockup and prototyping phases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sketchapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Sketch&lt;/strong&gt;&lt;/a&gt; – Sketch has almost become the default for UI design in mobile and web applications, superseding things like Photoshop. The main reason is that modern app development means that you are going to be working on a variety of different sizes and densities, so it’s super important to be designing in Vector formats that can resize nicely. Sketch also has an amazing community of components available at places like &lt;a href=&quot;https://www.sketchappsources.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sketch Resources&lt;/a&gt; and &lt;a href=&quot;https://sketchrepo.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SketchRepo&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zeplin.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Zeplin&lt;/strong&gt;&lt;/a&gt; – Zeplin is a great way of getting the information about fonts and colors and stuff from those sketch files so you can use them in development.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.adobe.com/au/products/experience-design.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Adobe Experience Designer (XD)&lt;/strong&gt;&lt;/a&gt;  – I’ve been playing around with Adobe XD recently and I’ve really enjoyed using this app. It may become my default designer tool (at least for mock-ups). It pretty blatantly copies the great things from sketch and at the moment it is free to use whilst in Beta. My opinion may change when I have to pay for it via Adobe Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;image-and-font-resources&quot;&gt;Image and Font Resources&lt;/h3&gt;

&lt;p&gt;Lastly for design, here are some resources I use for icons and fonts (because I’m really not great at creating icons).  And let’s face it, good choice of fonts and icons can make or break an application:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iconfinder.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;IconFinder&lt;/strong&gt;&lt;/a&gt; – lots of icons in multiple sizes.  It has a paid section, but it’s also got a lot of free resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.syncfusion.com/downloads/metrostudio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MetroStudio&lt;/a&gt;&lt;/strong&gt; – This is a great Windows app that has thousands of icons that you can search through and also combine together. Free.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://icons8.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Icons8&lt;/strong&gt;&lt;/a&gt; – Thousands of free icons in different styles and sizes.  You can also recolour them as well.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://material.io/icons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Official Material Design Icons&lt;/strong&gt;&lt;/a&gt; – If you are designing for Android you should probably try and stick the the official icons if you can.  Get’em here.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fonts.google.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Google Fonts&lt;/strong&gt;&lt;/a&gt; – Google has loads of fonts you can download and use in your apps.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.fontsquirrel.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Font Squirrel&lt;/a&gt;&lt;/strong&gt; – If you are after something a little more wacky, Font Squirrel probably has you covered.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://iosfontlist.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS Font List&lt;/a&gt;&lt;/strong&gt; – Not really a font archive, but a great resource to see what fonts are available on different versions of iOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 style=&quot;text-align: center;&quot;&gt;
  Develop
&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s talk IDEs first and foremost. I use VS2017 on PC and on Mac, both are amazing IDEs. I also use Visual Studio Code on Mac and PC, mostly for editing Mark Down files or file previewing. I don’t use a lot of different Extensions in the IDE’s but here are some of my favorites:&lt;/p&gt;

&lt;h3 id=&quot;vs2017-mac-extensions&quot;&gt;VS2017 Mac Extensions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mfractor.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;mFractor&lt;/strong&gt;&lt;/a&gt; – An amazing set of tools targeted right at Xamarin developers to help them get their job done.  I won’t say this is like ReSharper for VSMac, because it’s actually more useful than that. It’s got cool editor extensions like quick navigation between Views and ViewModels, Android Resource previewing and checking, a nifty Image Resizer, and tons more stuff.  If you live in VSMac then seriously check it out.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Redth/XamarinStudio.RedthsAddin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;ObliteratePaths&lt;/strong&gt;&lt;/a&gt; – Redths extension for nuking Bin and Obj folders.  This is super handy for getting rid of those folders before emailing some source code to someone else… Also Clean and Rebuild sometimes doesn’t really clean.  James Montemagno has a good &lt;a href=&quot;http://motzcod.es/post/120368961047/xamarin-studio-obliterate-output-paths-binobj&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog post on how to install&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vs2017-pc-extensions&quot;&gt;VS2017 PC Extensions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=TeamXavalon.XAMLStyler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;XAML Styler&lt;/strong&gt;&lt;/a&gt; – Formats your XAML when you save your XAML files. This just makes working with XAML nicer.  Also if you work with a team then you can have consistent indenting and attributes across your files.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.CleanSolution&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Clean Solution&lt;/strong&gt;&lt;/a&gt; – Cleans up the solution for the next time you open it. Closes open documents and collapses folders automatically when a solution is being closed.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProductivityPowerPack2017&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Productivity Power Tools 2017&lt;/strong&gt;&lt;/a&gt; – Installs a whole bunch of useful IDE extensions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;working-with-data&quot;&gt;Working with Data&lt;/h3&gt;

&lt;p&gt;Like it or not, a great deal of our time is working with Data.  In a mobile context that mostly means hitting Web Services and local databases (SQLite or Realm). Here are my favorite tools and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.getpostman.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Postman&lt;/a&gt;&lt;/strong&gt; – This is an essential tool for hitting web services checking requests and responses. It has amazing capabilities like the ability to share request information with other members of your team, creating tests and also basically just seeing how an API works and what it’s going to give you back. Another tool I use to create my Data Transfer Objects (DTO’s) for services is sites like &lt;a href=&quot;http://json2csharp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;json2csharp&lt;/a&gt;. The workflow looks something like this: Make A Request in Postman, copy the resulting JSON into JSON2CSharp (or in VS2017 PC, you can just use Edit -&amp;gt; Paste Special -&amp;gt; Paste JSON as CSharp). Create DTO classes… too easy!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/paulcbetts/refit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Refit&lt;/strong&gt;&lt;/a&gt; – Simplify calling Rest services.  If you want to simplify your code for calling web services give Refit a shot, you can basically just create an interface which describes your web service, then let it do all the hard work of accessing the service… no need to worry about doing the serializing and deserializing yourself or creating GET and PUT methods… it’ll do it for you.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thepollyproject.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Polly&lt;/strong&gt;&lt;/a&gt; – Automatic retry policies. The reality is that on mobile devices your connection sucks. It’s going to disappear for no apparent reason and sometimes the best thing is to just reissue a request. Polly is going to help you out here by allowing you to define automatic retry policies.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.newtonsoft.com/json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;JSON.NET&lt;/strong&gt;&lt;/a&gt; – The &lt;strong&gt;only&lt;/strong&gt; library for parsing JSON results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rob Gibbens has a really great blog post on putting some of these tools together in his Resilient Network Services with Mobile Xamarin Apps article, you should definitely read this. &lt;a href=&quot;http://arteksoftware.com/resilient-network-services-with-xamarin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://arteksoftware.com/resilient-network-services-with-xamarin/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sqlite&quot;&gt;SQLite&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.nuget.org/packages/sqlite-net-pcl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sqlite-Net-PCL&lt;/a&gt;&lt;/strong&gt; – Dead simple SQLite integration – This package from Frank Krueger is the best way (I know of) to integrate SQLite into your Xamarin Apps. It also provides a light weight ORM interface to make it really simple to use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes, you need to have a look at those pesky SQLite databases, here are my favorite tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://datumapps.com/datum.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Datum&lt;/strong&gt;&lt;/a&gt; – SQLite browser (Mac) – Available from the App Store.  There is a free edition and it just seems to work.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sqlitebrowser.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;DB Browser for SQLite&lt;/strong&gt;&lt;/a&gt; –  free cross platform tool which will allow you to create databases, define the schema, and add records to the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cloud-town&quot;&gt;Cloud Town&lt;/h3&gt;

&lt;p&gt;It’s a cloud first world… or that’s what they tell me. Azure is my go to cloud provider…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Azure.Mobile.Client/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Azure Mobile Client SDK&lt;/a&gt;&lt;/strong&gt; – A really nice client library that provides abstraction over the HTTP messaging and all the other hard stuff.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MikeCodesDotNet/App-Service-Helpers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;App Service Helpers&lt;/strong&gt;&lt;/a&gt; – Some of the Xamarin Dev Evangelist types have also create a helper class that makes it even easier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Talking of Azure services, the Cognitive services stuff in Azure is amazing. Some great speech and vision API’s.. If you ever wanted to write “&lt;a href=&quot;https://www.youtube.com/watch?v=ACmydtFDTGs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Not Hotdog&lt;/a&gt;” but don’t have the required Machine Learning / AI qualifications, let &lt;a href=&quot;https://azure.microsoft.com/en-au/services/cognitive-services/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cognitive Services&lt;/a&gt; do it for you.&lt;/p&gt;

&lt;h3 id=&quot;debugging-and-profiling&quot;&gt;Debugging and Profiling&lt;/h3&gt;

&lt;p&gt;Let’s face it, unless you are super-human you probably spend half your time &lt;em&gt;writing&lt;/em&gt; bugs. So debugging and profiling is an important part of #developerlife. Here are the tools I tend to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/decompiler/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;JetBrains dotPeek&lt;/strong&gt;&lt;/a&gt; – Because sometimes you just have to decompile some stuff to see how it works.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/profile/monitor.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Android Device Monitor&lt;/strong&gt;&lt;/a&gt; – Comes with the Android Studio and is installed with Xamarin. I mainly use this for looking at logs but it’s also useful for looking at process memory usage and accessing the file system on emulators.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/debug/dev-options.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;On-Device Developer Options&lt;/strong&gt;&lt;/a&gt; – Android devices also have some pretty cool tools built right in under the Developer Options. I mainly use this to debug overdraw and to slow down animations, but there is other cool stuff in there as well.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Xcode Instruments&lt;/strong&gt;&lt;/a&gt; – Event though it’s part of XCode and targetted at Objective-C and Swift apps, you can also use this to profile your Xamarin.IOS applications. Well technically, it doesn’t really understand anything about Xamarin and managed memory, but still it can be used to track things like allocations and memory usage. &lt;a href=&quot;https://developer.xamarin.com/guides/ios/deployment,_testing,_and_metrics/using_instruments_to_detect_native_leaks_using_markheap/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin has some docs on using it too&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/download/more/?q=Additional%20Tools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Network Link Conditioner&lt;/strong&gt;&lt;/a&gt; – Another cool tool which can be used to test how your Xamarin.iOS app handles crappy networks is the Network Link Conditioner. Here is a &lt;a href=&quot;http://nshipster.com/network-link-conditioner/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pretty good reference&lt;/a&gt; to get you started.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xamarin.com/profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Xamarin Profiler&lt;/strong&gt;&lt;/a&gt; – When all else fails I pull out the big guns… The Xamarin Profiler! Unfortunately this is a Visual Studio Enterprise feature but it’s definitely worth its weight in gold when trying to find memory leaks in your Xamarin applications.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-au/visualstudio/profiling/index&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual Studio 2017 Profiler Tools&lt;/a&gt;&lt;/strong&gt; – Also don’t forget that you can also use the Visual Studio Profiler for profiling quite a bit of stuff. Especially Shared PCLs and libraries that you are using.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;visual-design&quot;&gt;Visual Design&lt;/h3&gt;

&lt;p&gt;I’m not too bad at laying out screens, but I still love to be able to get previews of what I’m doing. In Xamarin.IOS and Xamarin.Android you are fine because you have the Designers built into Visual Studio. For Xamarin.Forms things get a little bit trickier. Here are some tools I use to keep myself going insane whilst laying out screens.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gorillaplayer.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Gorilla Player&lt;/strong&gt;&lt;/a&gt; – This is a great tool, which is now free. It allows you to preview your Xamarin.Forms XAML on multiple devices, it requires a little bit of setup but once you are setup anytime you save your XAML file it will be sent out to gorilla player on whatever devices (or simulators) you have connected so you can preview. Pro Tip: run it on multiple different sized devices (and OS’s) at the same time to see how things look.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xamarin.com/live&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Xamarin Live Player&lt;/strong&gt;&lt;/a&gt; – This is the new kid on the block. This allows you to preview your applications (actually running) on a device as you edit your code (not only your XAML). Also works with Xamarin.IOS and Xamarin.Android. It’s still pretty heavily under development, but you should definitely give this a shot. Also, sign up for the Xamarin Live Player Alpha to get the latest bits.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/cross-platform/workbooks/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin WorkBooks&lt;/a&gt;&lt;/strong&gt; – A great way to experimenting with different things and also useful for documentation. There is also the &lt;a href=&quot;https://developer.xamarin.com/guides/cross-platform/inspector/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin Inspector&lt;/a&gt; which you can use to interrogate the UI of your application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paintcodeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PaintCode&lt;/a&gt;&lt;/strong&gt; – This one is a little different, but with PaintCode you can draw your images and vectors and then have it spit out source code for your designs. It’s a paid mac app, but if you are going to be doing lots of graphics it may just be worth it. Especially, if you want to use drawing code to provide resolution independence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mirroring-devices&quot;&gt;Mirroring Devices&lt;/h3&gt;

&lt;p&gt;You always want to be testing on physical devices, and heaven forbid, sometimes you even have to present your apps to other people. Here are some tools to help:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://vysor.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vysor&lt;/a&gt;&lt;/strong&gt; – This is a sweet little utility for mirroring your Android physical device to your screen. You can even interact with the device through your mouse. Highly recommended!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@patrickswong/how-to-mirror-your-iphone-with-a-lightning-cable-using-quicktime-in-os-x-yosemite-ace3f40ef483&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;QuickTime Player&lt;/strong&gt;&lt;/a&gt; – For mirroring iOS devices my goto is the inbuilt QuickTime Player. Great for mirroring your iOS devices during demonstrations.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.airserver.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;AirServer&lt;/strong&gt;&lt;/a&gt; – If you want to mirror your iOS device to windows I have found that this works very well. It also works for Android and Miracast as well. It’s a paid app though.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mvvm-life&quot;&gt;MVVM Life&lt;/h3&gt;

&lt;p&gt;I often joke that &lt;em&gt;to be good at MVVM you really just need to have a really strong opinions and tell everyone else they are doing it wrong&lt;/em&gt;. But seriously MVVM is a great architecture for building your applications. I tend to stay fairly light weight and don’t use many frameworks, having said that here are some frameworks and l do use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Fody/PropertyChanged&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Fody Property Changed&lt;/strong&gt;&lt;/a&gt; – This is an code weaver that can help you out writing your INotifyPropertyChange notifications and keep your code nice and clean.  Clean models FTW.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jamesmontemagno/mvvm-helpers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;MVVMHelpers&lt;/strong&gt;&lt;/a&gt; – a nice light weight set of MVVM Helpers from James Montemagno that just has the stuff you need.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xamarinhq/xamu-infrastructure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Xamarin University Infrastructure&lt;/strong&gt;&lt;/a&gt; – There are some great bits in here, including abstractions for the Xamarin Forms navigation service, a bunch of converters, behaviors, and services. Dig through and check it out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then there are the frameworks. Like I said I don’t use a lot of these, but I would feel like a bad developer if I didn’t mention them 🙂 :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PrismLibrary/Prism&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Prism&lt;/strong&gt;&lt;/a&gt; – Has an amazing navigation system. There is also an &lt;a href=&quot;https://xamgirl.com/prism-in-xamarin-forms-step-by-step-part-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;excellent series of blog posts from XamGirl&lt;/a&gt; to help get you started.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rid00z/FreshMvvm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FreshMvvM&lt;/a&gt;&lt;/strong&gt; – Super lightweight and just includes the stuff that vanilla Xamarin.Forms leaves out&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://exrin.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ExRin&lt;/a&gt;&lt;/strong&gt; – A larger framework for enterprise scale apps&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.mvvmcross.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MVVMCross&lt;/a&gt;&lt;/strong&gt; – Very popular Framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mvvmlight.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;MVVMLight&lt;/strong&gt;&lt;/a&gt; – yet another popular framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactiveui.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;ReactiveUI&lt;/strong&gt;&lt;/a&gt; – Reactive programming is definitely something I should look into more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;libraries-and-components&quot;&gt;Libraries and Components&lt;/h3&gt;

&lt;p&gt;I’m a lazy developer. If I can find an existing component and library to do what I want, I’ll use it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/xamarin/XamarinComponents&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin Plugins&lt;/a&gt;&lt;/strong&gt; – This is the motherload of components you can use with your Xamarin applications that give you a cross platform API to access device specific things. You should seriously check this out. The most common ones I use in just about every project are:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jamesmontemagno/ConnectivityPlugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Connectivity&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/molinch/FFImageLoading&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;FFImageLoading&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jamesmontemagno/SettingsPlugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Settings&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dsplaisted/PCLStorage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;PCL File Storage&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aritchie/userdialogs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;ACR User Dialogs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there are some other amazing libraries, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/martijn00/LottieXamarin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Lottie&lt;/strong&gt;&lt;/a&gt; – If you are working with designers who are throwing After Effects animations at you, or if you just want to spice up your UI have a look at this bad boy.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jsmarcus/Xamarin.Plugins/tree/master/Iconize&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Iconize&lt;/strong&gt;&lt;/a&gt; – Provides a nice easy way to integrate font libraries like FontAwesome into your applications. Using these will help you keep your file sizes down and provide images that scale nicely.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rotorgames/Rg.Plugins.Popup&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;RG.Plugins.Popup&lt;/strong&gt;&lt;/a&gt; – If you want to create popups in your app, this is a really nice approach.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MarcBruins/awesome-xamarin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Awesome Xamarin&lt;/strong&gt;&lt;/a&gt; – There are a million other libraries you should consider, Marc Bruins has a great list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then we have the UI Components from the vendors. I have students quite regularly ask things like “I want to build a grid control with XYZ features, how should I do it”… normally my answer is don’t. Save yourself some time and check out components from vendors who do this stuff for a living. The cost saving in terms of time is normally worth it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.syncfusion.com/products/xamarin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SyncFusion&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.telerik.com/xamarin-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Telerik&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.devexpress.com/products/xamarin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;DevExpress&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infragistics.com/products/xamarin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Infragistics&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.steema.com/product/forms&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Steema&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.goxuni.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;GrapeCity&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 style=&quot;text-align: center;&quot;&gt;
  Test
&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;We all unit test, right? Sure. 🙂 If you are using Nunit then you’ll want to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com.au/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjZqvrFru3VAhVFvrwKHePjBZAQFggoMAA&amp;amp;url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DNUnitDevelopers.NUnit3TestAdapter&amp;amp;usg=AFQjCNFmslTGuiphMZ9AIzclWitYyhPnwA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Nunit Test Adapter&lt;/strong&gt;&lt;/a&gt; – plugs into Visual Studio so you can integrate unit tests into your VS Life.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=NUnitDevelopers.NUnitTemplatesforVisualStudio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Nunit Templates&lt;/strong&gt;&lt;/a&gt; – a set of templates for creating unit test files… because nobody has time to remember all those attributes. But speaking of attributes, here is a &lt;a href=&quot;https://lukewickstead.wordpress.com/2013/01/16/nunit-cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nice cheat sheet for Nunit&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Visual Studio 2017 now has a great feature called Live Testing, which I would highly recommend having a look at as well.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AutoFixture/AutoFixture&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;AutoFixture&lt;/strong&gt;&lt;/a&gt; – because sometimes you can’t be bother creating your own data for unit tests. This library will reflect over your models, so you can just ask it to create a bunch of objects for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ui-testing&quot;&gt;UI Testing&lt;/h3&gt;

&lt;p&gt;Mobile applications run on a bunch of different devices, so you’ll want to make sure you test how your UI is going to look on a range of devices. You can find some good stats on iOS and Android usage information here over at &lt;a href=&quot;https://data.apteligent.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apteligent&lt;/a&gt;. Also, you don’t want to be testing UI manually, because it’s really slow and inconsistent.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/testcloud/uitest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Xamarin.UITest&lt;/strong&gt;&lt;/a&gt; – Write your tests in C# and test on simulators and devices.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xamarin.com/test-cloud/recorder&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Xamarin Test Recorder&lt;/strong&gt;&lt;/a&gt; – Record your interactions with your application and output them as UITests. The fastest way to create your tests… then take the code and fine tune as required. Often, the thing to do is to move them across to a page object type of structure so they are more maintainable. &lt;a href=&quot;https://danatxamarin.com/2015/05/12/building-a-scalable-test-suite-with-xamarin-uitest-and-page-objects/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Here is a good blog series on it&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xamarin.com/test-cloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Test Cloud&lt;/strong&gt;&lt;/a&gt; – When you are ready to test on &lt;a href=&quot;https://testcloud.xamarin.com/devices&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;thousands of physical devices&lt;/a&gt;, you should consider having a look at Test Cloud. They’ve got more devices than you can poke a stick at.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 style=&quot;text-align: center;&quot;&gt;
  Deploy
&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Continuous Integration and Continuous Deployment practices these days should be considered a “must have”. And with the tools available it’s really very simple to get started. Here are my favorites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mobile.azure.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Mobile Center&lt;/strong&gt;&lt;/a&gt; – – This is an amazing service from Microsoft. It’s dead simple to setup automated builds. Check it out. It also does crash reporting which is an essential part of any mobile application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raygun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;RayGun&lt;/strong&gt;&lt;/a&gt; – A great analytics tool.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bitrise.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;BitRise&lt;/strong&gt;&lt;/a&gt; – I’ve really enjoyed creating builds through BitRise. It’s simple to use and very powerful.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fastlane.tools/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Fastlane&lt;/strong&gt;&lt;/a&gt; – A collection of amazing tools to help you with iOS provisioning Profile hell and automated deployments to the app stores&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 style=&quot;text-align: center;&quot;&gt;
  Staying Up To Date
&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Finally it’s worth mentioning that keeping up to date with all the tools and new stuff happening in the Xamarin (and mobile) world is hard (but necessary). Instead of putting out all the sources here, let me point you to my blog post on &lt;a href=&quot;http://www.kymphillpotts.com/staying-up-to-date-with-xamarin-development/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Staying up to Date with Xamarin Development&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 style=&quot;text-align: center;&quot;&gt;
  Conclusion
&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;So there you have it people, a grab bag of tools, libraries and resources I use for Xamarin Development. I hope you find it useful. Maybe you have some tools or resources which you consider essential… please let me know or post some comments below. Remember, sharing is caring.&lt;/p&gt;

&lt;p&gt;Take care, and happy coding!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">As software developers we often use a scary number of Tools and Utilities to get our jobs done. Whenever you learn a new platform you also need to work out the “tools of the trade”. I recently gave a talk on the tools and resources I use to do Xamarin development, so I thought I would just share these out on a blog post.</summary>
      

      
      
        
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://res.cloudinary.com/dlstb15av/image/upload/v1506381714/tools_cv36dh.jpg" />
      
    </entry>
  
    <entry>
      <title type="html">Xamarin.Forms Layout Challenges – Great Places</title>
      <link href="/xamarin-forms-layout-challenges-great-places/" rel="alternate" type="text/html" title="Xamarin.Forms Layout Challenges &amp;#8211; Great Places" />
      <published>2017-03-20T22:50:36+01:00</published>
      <updated>2017-03-20T22:50:36+01:00</updated>
      <id>/xamarin-forms-layout-challenges-great-places</id>
      <content type="html" xml:base="/xamarin-forms-layout-challenges-great-places/">&lt;p&gt;When your app is all about the images, sometimes you want your images to be hero of the UI.  That’s what this weeks Xamarin.Forms Layout Challenge is all about.    &lt;!--more--&gt;Normally I prefer a light themed application, so just to change things up a bit, I thought I would go for a dark themed layout. They say, variety is the spice of life.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Simulator-Screen-Shot-20-Mar-2017-10.23.36-pm_fhaatz.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;
&lt;img src=&quot;/assets/images/posts/Screenshot_1490009341_ad3uvq.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;page-layout&quot;&gt;Page Layout&lt;/h2&gt;

&lt;p&gt;The page layout, not surprisingly is really just a ListView.  I played around with adding a bit of spice by making the ListView have a transparent background and put a purple gradient behind the ListView.  I’m not sure it’s great, but kind of interesting, none-the-less.
&lt;img src=&quot;/assets/images/posts/Animation_dpek0r.gif&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ColoredBackground&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fill&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fill&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Aspect=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fill&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;ListView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;placeList&quot;&lt;/span&gt; 
           &lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Transparent&quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;RowHeight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ItemsSource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding .}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SeparatorVisibility=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-viewcell&quot;&gt;The ViewCell&lt;/h2&gt;

&lt;p&gt;The ViewCell is pretty straight forward.  The wis a Grid of 2 rows.&lt;/p&gt;

&lt;p&gt;The “Hero Image” spans both the rows.  At the bottom, I included a slight “Transparent to Black” overlay that helps the text to be more readable at the bottom&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-5756&quot; src=&quot;https://i1.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381677/ViewCell-1_tqxzzn.png?resize=399%2C228&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;RowSpacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ColumnSpacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10,5&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AUTO&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span&gt;
							
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding HeroImage}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Aspect=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AspectFill&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.RowSpan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ShadowOverlay&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.RowSpan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;Aspect=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fill&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;End&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fill&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The text parts are  done with a Grid that occupies the 2nd row&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;RowSpacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ColumnSpacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AUTO&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;25&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ColumnDefinition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;25&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ColumnDefinition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ColumnDefinition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AUTO&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span&gt;
								
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Title}&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.ColumnSpan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{StaticResource TitleLabel}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;LineBreakMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NoWrap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;controls:CircleImage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding ProfileImage}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Aspect=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AspectFill&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;WidthRequest=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;25&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HeightRequest=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;25&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Handle}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{StaticResource HandleLabel}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Horizontal&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Spacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Eye&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding ViewCount, StringFormat='{0:N0}'}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{StaticResource HandleLabel}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;views&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{StaticResource BodyLabel}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;
						
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice that I have used the CircleImage plugin from James Montemagno.  It just requires a little reference to the namespace at the top of the page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmlns:controls=&quot;clr-namespace:ImageCircle.Forms.Plugin.Abstractions;assembly=ImageCircle.Forms.Plugin.Abstractions&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also for the viewcount, I added a little bit of string formatting, which is a nice little binding feature, to show the comma’s in the ViewCount.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding ViewCount, StringFormat='{0:N0}'}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{StaticResource HandleLabel}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-does-it-scale&quot;&gt;How does it scale&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;alignnone wp-image-5761&quot; src=&quot;https://i1.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381671/Simulator-Screen-Shot-20-Mar-2017-10.22.27-pm_zd4hi6.png?resize=248%2C441&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;  &lt;img class=&quot;alignnone wp-image-5760&quot; src=&quot;https://i2.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381672/Simulator-Screen-Shot-20-Mar-2017-10.23.01-pm_iyqvgo.png?resize=150%2C266&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt; &lt;img class=&quot;alignnone wp-image-5759&quot; src=&quot;https://i2.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381674/Simulator-Screen-Shot-20-Mar-2017-10.23.36-pm_fhaatz.png?resize=128%2C227&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It even doesn’t look too bad in landscape…&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-5769&quot; src=&quot;https://i0.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381666/Lanscape-Animation_whfs4c.gif?resize=426%2C239&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;So that is it, a simple image ListView.&lt;/p&gt;

&lt;p&gt;I thought I should also mention a couple of places I go to get nice images for mockups&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For random user data and images you can go to &lt;a href=&quot;https://randomuser.me/&quot;&gt;RandomUser.me&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For some really nice royalty free images you can use &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As always, and you can grab the project over at &lt;a href=&quot;https://github.com/kphillpotts/XamarinFormsLayoutChallenges&quot;&gt;https://github.com/kphillpotts/XamarinFormsLayoutChallenges&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, make sure you check out some of the other layouts in &lt;a href=&quot;http://www.kymphillpotts.com/xamarin-forms-layout-challenges/&quot;&gt;Xamarin.Forms Layout Challenges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Layouts!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">When your app is all about the images, sometimes you want your images to be hero of the UI.  That’s what this weeks Xamarin.Forms Layout Challenge is all about.    Normally I prefer a light themed application, so just to change things up a bit, I thought I would go for a dark themed layout. They say, variety is the spice of life.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Xamarin.Forms Layout Challenges – Timeline</title>
      <link href="/xamarin-forms-layout-challenges-timeline/" rel="alternate" type="text/html" title="Xamarin.Forms Layout Challenges &amp;#8211; Timeline" />
      <published>2017-03-09T15:53:17+01:00</published>
      <updated>2017-03-09T15:53:17+01:00</updated>
      <id>/xamarin-forms-layout-challenges-timeline</id>
      <content type="html" xml:base="/xamarin-forms-layout-challenges-timeline/">&lt;p&gt;A layout I’m seeing more and more these days is a timeline of activities.  This is useful for things like transportation schedules or class times.  So let’s put together a simple layout for a timeline using a ListView with headers and footers and a custom ViewCell.&lt;!--more--&gt;&lt;/p&gt;

&lt;div id=&quot;gallery-1&quot; class=&quot;gallery galleryid-5699 gallery-columns-2 gallery-size-full&quot;&gt;
  &lt;dl class=&quot;gallery-item&quot;&gt;
    &lt;dt class=&quot;gallery-icon portrait&quot;&gt;
      &lt;img src=&quot;https://i1.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381680/iPhone6-1-e1489032290107_p5pgok.png?resize=247%2C440&quot; class=&quot;attachment-full size-full&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&quot;gallery-item&quot;&gt;
    &lt;dt class=&quot;gallery-icon portrait&quot;&gt;
      &lt;img src=&quot;https://i0.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381679/AndroidPixel-1-e1489032278518_xgnvkx.png?resize=241%2C440&quot; class=&quot;attachment-full size-full&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&quot;clear: both&quot; /&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;page-structure&quot;&gt;Page Structure&lt;/h2&gt;

&lt;p&gt;This page is just a simple ListView, nothing really more complex than that.  I turned the Separators off.  Set the RowHeight to something that feels nice.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true&quot;&gt;&amp;lt;ListView
    x:Name=&quot;timelineListView&quot;
    ItemTapped=&quot;timelineListView_ItemTapped&quot;
    ItemsSource=&quot;{Binding .}&quot;
    RowHeight=&quot;75&quot;
    SeparatorVisibility=&quot;None&quot;&amp;gt;&lt;/pre&gt;

&lt;p&gt;Also, you may notice I have an ItemTapped hooked up that doesn’t do much:&lt;/p&gt;

&lt;pre class=&quot;lang:c# decode:true &quot;&gt;private void timelineListView_ItemTapped(object sender, ItemTappedEventArgs e)
{
  timelineListView.SelectedItem = null;
}&lt;/pre&gt;

&lt;p&gt;It just disables a row from being selected, mainly because it  looks rubbish when one of the rows is selected… but of course depending on your layout, you might actually want to do Master / Detail style navigation.&lt;/p&gt;

&lt;h2 id=&quot;header&quot;&gt;Header&lt;/h2&gt;

&lt;p&gt;If you want something to appear above your ListView and have it scroll with the ListView use a header.&lt;/p&gt;

&lt;p&gt;Pro Tip: Whatever you do, do NOT put a ScrollView around the entire page.  Having nested scrolling containers (eg. ScrollView with ListView inside) is just going end with tears.  Use a Header instead.&lt;/p&gt;

&lt;p&gt;For our header, it’s just a simple stack layout with some labels and a bit of padding&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true&quot;&gt;&amp;lt;ListView.Header&amp;gt;
      &amp;lt;StackLayout Padding=&quot;20,40,0,30&quot;&amp;gt;
        &amp;lt;Label Style=&quot;{StaticResource PageHeaderLabel}&quot; Text=&quot;Class Schedule&quot; /&amp;gt;
        &amp;lt;Label Style=&quot;{StaticResource SubHeaderLabel}&quot; Text=&quot;8 Mar 2017&quot; /&amp;gt;
      &amp;lt;/StackLayout&amp;gt;
    &amp;lt;/ListView.Header&amp;gt;&lt;/pre&gt;

&lt;h2 id=&quot;footer&quot;&gt;Footer&lt;/h2&gt;

&lt;p&gt;Down the bottom of the list, we have just put an image.  Not for any particularly good reason, just to jazz up the page a bit and show how footers work.  You could easily get rid of it and have a nice layout, I figured I’d just include it to complete the header / footer idea.&lt;/p&gt;

&lt;p&gt;In our case the footer contains a Grid with two rows. The actual background image “Footer.png” occupies both the rows.  Then we have a transparent-to-white gradient image that is overlaid in the first row.  Basically just creating a fade in effect for the image.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true&quot;&gt;&amp;lt;ListView.Footer&amp;gt;
      &amp;lt;Grid RowSpacing=&quot;0&quot;&amp;gt;
        &amp;lt;Grid.RowDefinitions&amp;gt;
          &amp;lt;RowDefinition Height=&quot;64&quot; /&amp;gt;
          &amp;lt;RowDefinition Height=&quot;100&quot; /&amp;gt;
        &amp;lt;/Grid.RowDefinitions&amp;gt;
        &amp;lt;Image Grid.RowSpan=&quot;2&quot; Aspect=&quot;AspectFill&quot; HorizontalOptions=&quot;Fill&quot; VerticalOptions=&quot;Start&quot; Source=&quot;YogaImage.png&quot; /&amp;gt;
        &amp;lt;Image Aspect=&quot;Fill&quot; Grid.RowSpan=&quot;2&quot; HorizontalOptions=&quot;Fill&quot; Source=&quot;FadeToWhite.png&quot; /&amp;gt;
      &amp;lt;/Grid&amp;gt;
    &amp;lt;/ListView.Footer&amp;gt;&lt;/pre&gt;

&lt;h2 id=&quot;viewcell&quot;&gt;ViewCell&lt;/h2&gt;

&lt;p&gt;All the real magic happens in the ViewCell which defines what each row is going to look like.&lt;/p&gt;

&lt;p&gt;At it’s core it’s just a simple Grid with 3 columns and two rows.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-5731&quot; src=&quot;https://i1.wp.com/res.cloudinary.com/dlstb15av/image/upload/v1506381678/GridLayout_fjz7js.png?resize=250%2C51&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only really interesting bit of this is the actual lines and circles that form the timeline.  This is achieved by a thin vertical BoxView that runs the height of the Viewcell.  Overlayed in the first row is our circle image.  Nothing magical here.&lt;/p&gt;

&lt;p&gt;Now you might notice that it uses a ValueConverter for the IsVisible property, this is kind of a hack to make the line not appear in the last row.  Our model object (which would actually probably be a ViewModel in a real app) has a property called IsLast which is set to true for the last row.  And then we have a NotBooleanConverter assigned to the IsVisible of the line, so basically the line isn’t rendered on the last row.  It feels a bit awkward, but off the top of my head, given the time, I couldn’t think of a better option.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true&quot;&gt;&amp;lt;ListView.ItemTemplate&amp;gt;
      &amp;lt;DataTemplate&amp;gt;
        &amp;lt;ViewCell&amp;gt;
          &amp;lt;Grid ColumnSpacing=&quot;0&quot; RowSpacing=&quot;0&quot;&amp;gt;
            &amp;lt;Grid.ColumnDefinitions&amp;gt;
              &amp;lt;ColumnDefinition Width=&quot;100&quot; /&amp;gt;
              &amp;lt;ColumnDefinition Width=&quot;30&quot; /&amp;gt;
              &amp;lt;ColumnDefinition Width=&quot;*&quot; /&amp;gt;
            &amp;lt;/Grid.ColumnDefinitions&amp;gt;
            &amp;lt;Grid.RowDefinitions&amp;gt;
              &amp;lt;RowDefinition Height=&quot;Auto&quot; /&amp;gt;
              &amp;lt;RowDefinition Height=&quot;*&quot; /&amp;gt;
            &amp;lt;/Grid.RowDefinitions&amp;gt;

            &amp;lt;Label HorizontalOptions=&quot;Center&quot; Style=&quot;{StaticResource ClassTimeLabel}&quot; Text=&quot;{Binding ClassTime, StringFormat='{0:H:mm}'}&quot; /&amp;gt;

            &amp;lt;Label
              Grid.Column=&quot;2&quot;
              Margin=&quot;20,0&quot;
              Style=&quot;{StaticResource ClassNameLabel}&quot;
              Text=&quot;{Binding ClassName}&quot; /&amp;gt;

            &amp;lt;Label
              Grid.Row=&quot;1&quot;
              Grid.Column=&quot;2&quot;
              Margin=&quot;20,0&quot;
              Style=&quot;{StaticResource ClassInstructorLabel}&quot;
              Text=&quot;{Binding Instructor}&quot; /&amp;gt;

            &amp;lt;BoxView
              Grid.RowSpan=&quot;2&quot;
              Grid.Column=&quot;1&quot;
              BackgroundColor=&quot;{StaticResource TimelineColor}&quot;
              HorizontalOptions=&quot;Center&quot;
              IsVisible=&quot;{Binding IsLast, Converter={local:NotBooleanConverter}}&quot;
              VerticalOptions=&quot;Fill&quot;
              WidthRequest=&quot;3&quot; /&amp;gt;

            &amp;lt;Image Grid.Column=&quot;1&quot; Source=&quot;Bullet.png&quot; /&amp;gt;

          &amp;lt;/Grid&amp;gt;
        &amp;lt;/ViewCell&amp;gt;
      &amp;lt;/DataTemplate&amp;gt;
    &amp;lt;/ListView.ItemTemplate&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;So that is it, a simple timeline using a ListView.  It works pretty nicely.&lt;/p&gt;

&lt;p&gt;Here are some links for further information about some of the techniques:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/listview/&quot;&gt;Xamarin ListView documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/listview/customizing-list-appearance/#Headers_and_Footers&quot;&gt;Headers and Footers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/listview/customizing-cell-appearance/#Custom_Cells&quot;&gt;Custom Cells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As YouTubers would say: “let me know in the comments if you liked this” 🙂 Also, If you have any layouts that you thing would be interesting to cover, just let me know.&lt;/p&gt;

&lt;p&gt;Oh yeah, and you can grab the project over at &lt;a href=&quot;https://github.com/kphillpotts/XamarinFormsLayoutChallenges&quot;&gt;https://github.com/kphillpotts/XamarinFormsLayoutChallenges&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, make sure you check out some of the other layouts in &lt;a href=&quot;http://www.kymphillpotts.com/xamarin-forms-layout-challenges/&quot;&gt;Xamarin.Forms Layout Challenges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Layouts!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">A layout I’m seeing more and more these days is a timeline of activities.  This is useful for things like transportation schedules or class times.  So let’s put together a simple layout for a timeline using a ListView with headers and footers and a custom ViewCell.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Xamarin.Forms Layout Challenges – Social Network App</title>
      <link href="/social-network-app-layout-design-in-xamarin-forms/" rel="alternate" type="text/html" title="Xamarin.Forms Layout Challenges &amp;#8211; Social Network App" />
      <published>2017-03-05T22:53:33+01:00</published>
      <updated>2017-03-05T22:53:33+01:00</updated>
      <id>/social-network-app-layout-design-in-xamarin-forms</id>
      <content type="html" xml:base="/social-network-app-layout-design-in-xamarin-forms/">&lt;p&gt;Xamarin.Forms is a crazy productive framework for building cross platform apps. However, straight out of the box you might find your User Interfaces are a bit bland. A good understanding of the layout system (and a good graphic designer) are really going to help you make your UI’s awesome. (or at least not suck).&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;So let’s see how to recreate a simple Social Network profile type page in Xamarin.Forms.&lt;/p&gt;

&lt;p&gt;There are two challenge ingredients for this app.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Creating a curved header Image&lt;/li&gt;
  &lt;li&gt;Making a Profile Image that overlaps the header&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The design of the app looks a little like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;size-medium aligncenter&quot; src=&quot;https://i0.wp.com/raw.githubusercontent.com/kphillpotts/XamarinFormsLayoutChallenges/master/SocialNetwork/Screenshots/iPhone6-33.png?resize=248%2C440&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-layout&quot;&gt;Basic Layout&lt;/h2&gt;

&lt;p&gt;Grids are my default goto layout container for Xamarin.Forms. They aren’t perfect for every situation, but they do provide:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Proportional sizing of rows and columns,&lt;/li&gt;
  &lt;li&gt;The ability to overlaying controls within a cell (or multiple cells), and&lt;/li&gt;
  &lt;li&gt;They resize reasonably well by default&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of which make them pretty useful for a range of designs.&lt;/p&gt;

&lt;p&gt;The basic structure of the page is a simple Grid with one column and multiple rows. Within the cells are stack layouts for some of the text elements that stack on each other, and to provide the three social stats across the page it has a nested grid with three columns.&lt;/p&gt;

&lt;p&gt;Using Xamarin Inspector is a pretty good way of visualising the View Hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;size-medium aligncenter&quot; src=&quot;https://i1.wp.com/raw.githubusercontent.com/kphillpotts/XamarinFormsLayoutChallenges/master/SocialNetwork/Screenshots/Inspector.png?resize=700%2C572&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lets-break-it-down&quot;&gt;Let’s break it down&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;header&quot;&gt;Header&lt;/h3&gt;

&lt;p&gt;The header is just basically an Image that fills the first row of the Grid. To get the curve at the bottom you have a couple of options.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Option 1: Pre-made Image&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You could create your header image with a curve at the bottom like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-medium&quot; src=&quot;https://i0.wp.com/raw.githubusercontent.com/kphillpotts/XamarinFormsLayoutChallenges/master/SocialNetwork/Screenshots/HeaderCurved.png?resize=360%2C200&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The downside of this is that you have to prepare this ahead of time, and may not be appropriate for dynamically loaded images.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Option 2: Apply a mask&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Instead, we can kind of cheat and just add a mask image that lays over the bottom of the background header image. This is the option I went for here because it provides more flexibility. We could for example, have different masks for different OS’s or different Idioms (eg. Phone, Tablet, Desktop). The mask image could be any design you want, but for this I just went for a simple arc, like this (shadow added so you can see the shape).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-medium&quot; src=&quot;https://i0.wp.com/raw.githubusercontent.com/kphillpotts/XamarinFormsLayoutChallenges/master/SocialNetwork/Screenshots/CurvedMask-sample.png?resize=370%2C50&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true&quot;&gt;&amp;lt;!-- header background --&amp;gt;
&amp;lt;Image Source=&quot;HeaderBackground.png&quot; Aspect=&quot;AspectFill&quot;/&amp;gt;
&amp;lt;Image Source=&quot;CurvedMask.png&quot; VerticalOptions=&quot;End&quot; Aspect=&quot;AspectFill&quot; Margin=&quot;0,0,0,-1&quot;/&amp;gt;&lt;/pre&gt;

&lt;p&gt;It provides a nice effect and the only real downside is that it has to be the same colour as the background. You may notice that there is something slightly hacky in there and that is setting the `Margin` bottom to -1. This is just to cover off some weirdness you might get on different sizes where the background shows underneath (presumably due to rounding errors of the AspectFill). So putting the value to -1 just means it will handle that boundary condition.&lt;/p&gt;

&lt;h3 id=&quot;profile-image&quot;&gt;Profile Image&lt;/h3&gt;

&lt;p&gt;The profile image is just a simple graphic, but the trick to get it to overlay the background image is with just a couple of settings.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;Image Source=&quot;ProfilePic.png&quot; Margin=&quot;0,0,0,-50&quot; HeightRequest=&quot;100&quot; WidthRequest=&quot;100&quot; HorizontalOptions=&quot;Center&quot; VerticalOptions=&quot;End&quot;/&amp;gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Set the `WidthRequest` and `HeightRequest` to a known value (100 in this case)&lt;/li&gt;
  &lt;li&gt;Set the `Margin` to a negative value so that it comes up the page by half of it’s height (50).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s it.&lt;/p&gt;

&lt;p&gt;Now I did kind of cheat because I’ve got a precreated image for this sample, but that’s because I just wanted to talk about layout. In a real app, I highly recommend you use the &lt;a href=&quot;https://github.com/jamesmontemagno/ImageCirclePlugin&quot;&gt;ImageCirclePlugin&lt;/a&gt; from James Montemagno, or use the &lt;a href=&quot;https://github.com/luberda-molinet/FFImageLoading&quot;&gt;FFImageLoading&lt;/a&gt; Library and apply a &lt;a href=&quot;https://github.com/luberda-molinet/FFImageLoading/wiki/Transformations-Guide#circletransformation&quot;&gt;CircleTransformation&lt;/a&gt; to the image.&lt;/p&gt;

&lt;h3 id=&quot;scrollview&quot;&gt;ScrollView&lt;/h3&gt;

&lt;p&gt;I’ve wrapped the main grid with a ScrollView, this is just so if the page ends up being larger than the screen then you can scroll down to the bottom.&lt;/p&gt;

&lt;p&gt;Also there is a ScrollView around the Profile Description. Generally speaking having one ScrollView within another is a no-no, but in this case it’s not really a deal breaker because it is just there to handle the case where the profile description is just a little bit longer and pushes the button off the bottom of the page.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-scale&quot;&gt;How does it scale?&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The true test of any page is how does it scale across different sizes, and actually it does pretty well. That’s the magic of grids.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-medium&quot; src=&quot;https://i0.wp.com/raw.githubusercontent.com/kphillpotts/XamarinFormsLayoutChallenges/master/SocialNetwork/Screenshots/iPhone6-33.png?resize=248%2C440&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;img class=&quot;alignnone size-medium&quot; src=&quot;https://i1.wp.com/raw.githubusercontent.com/kphillpotts/XamarinFormsLayoutChallenges/master/SocialNetwork/Screenshots/iPhone5-33.png?resize=158%2C281&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;show-me-the-codez&quot;&gt;Show me the codez&lt;/h2&gt;

&lt;pre class=&quot;lang:xhtml decode:true&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&amp;lt;ContentPage xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;
             xmlns:local=&quot;clr-namespace:SocialNetwork&quot;
             x:Class=&quot;SocialNetwork.MainPage&quot;
	BackgroundColor=&quot;White&quot;&amp;gt;

    &amp;lt;ScrollView&amp;gt;
        &amp;lt;Grid ColumnSpacing=&quot;0&quot; RowSpacing=&quot;0&quot;&amp;gt;
            &amp;lt;Grid.RowDefinitions&amp;gt;
                &amp;lt;RowDefinition Height=&quot;AUTO&quot; /&amp;gt;
                &amp;lt;RowDefinition Height=&quot;AUTO&quot; /&amp;gt;
                &amp;lt;RowDefinition Height=&quot;AUTO&quot; /&amp;gt;
                &amp;lt;RowDefinition Height=&quot;*&quot; /&amp;gt;
                &amp;lt;RowDefinition Height=&quot;AUTO&quot; /&amp;gt;
            &amp;lt;/Grid.RowDefinitions&amp;gt;

	    &amp;lt;!-- header background --&amp;gt;
	    &amp;lt;Image Source=&quot;HeaderBackground.png&quot; Aspect=&quot;AspectFill&quot;/&amp;gt;
	    &amp;lt;Image Source=&quot;CurvedMask.png&quot; VerticalOptions=&quot;End&quot; Aspect=&quot;AspectFill&quot; Margin=&quot;0,0,0,-1&quot;/&amp;gt;

	    &amp;lt;!-- profile image --&amp;gt;
	    &amp;lt;Image Source=&quot;ProfilePic.png&quot; Margin=&quot;0,0,0,-50&quot; HeightRequest=&quot;100&quot; WidthRequest=&quot;100&quot; HorizontalOptions=&quot;Center&quot; VerticalOptions=&quot;End&quot;/&amp;gt;

	    &amp;lt;!-- Profile Name --&amp;gt;
            &amp;lt;StackLayout Grid.Row=&quot;1&quot; HorizontalOptions=&quot;Center&quot; Padding=&quot;0,50,0,00&quot;&amp;gt;
                &amp;lt;Label HorizontalTextAlignment=&quot;Center&quot; Text=&quot;Clementine&quot; Style=&quot;{StaticResource ProfileNameLabel}&quot;/&amp;gt;
                &amp;lt;Label HorizontalTextAlignment=&quot;Center&quot; Text=&quot;Hipster Coffee Drinker&quot; Margin=&quot;0,-5&quot; Style=&quot;{StaticResource ProfileTagLabel}&quot;/&amp;gt;
            &amp;lt;/StackLayout&amp;gt;

	    &amp;lt;!-- Social Stats Section --&amp;gt;
            &amp;lt;Grid Grid.Row=&quot;2&quot; ColumnSpacing=&quot;0&quot; RowSpacing=&quot;0&quot; Margin=&quot;0,30&quot;&amp;gt;
                &amp;lt;Grid.ColumnDefinitions&amp;gt;
                    &amp;lt;ColumnDefinition Width=&quot;*&quot; /&amp;gt;
                    &amp;lt;ColumnDefinition Width=&quot;*&quot; /&amp;gt;
                    &amp;lt;ColumnDefinition Width=&quot;*&quot; /&amp;gt;
                &amp;lt;/Grid.ColumnDefinitions&amp;gt;

                &amp;lt;StackLayout&amp;gt;
                	&amp;lt;Label Text=&quot;33&quot; Style=&quot;{StaticResource StatsNumberLabel}&quot;/&amp;gt;
         		&amp;lt;Label Text=&quot;Likes&quot; Style=&quot;{StaticResource StatsCaptionLabel}&quot;/&amp;gt;
		&amp;lt;/StackLayout&amp;gt;

	        &amp;lt;StackLayout Grid.Column=&quot;1&quot;&amp;gt;
                	&amp;lt;Label Text=&quot;94&quot; Style=&quot;{StaticResource StatsNumberLabel}&quot;/&amp;gt;
         		&amp;lt;Label Text=&quot;Following&quot; Style=&quot;{StaticResource StatsCaptionLabel}&quot;/&amp;gt;
		&amp;lt;/StackLayout&amp;gt;

	        &amp;lt;StackLayout Grid.Column=&quot;2&quot;&amp;gt;
                	&amp;lt;Label Text=&quot;957&quot; Style=&quot;{StaticResource StatsNumberLabel}&quot;/&amp;gt;
         		&amp;lt;Label Text=&quot;Followers&quot; Style=&quot;{StaticResource StatsCaptionLabel}&quot;/&amp;gt;
		&amp;lt;/StackLayout&amp;gt;
           &amp;lt;/Grid&amp;gt;

	   &amp;lt;!-- profile description --&amp;gt;
	   &amp;lt;ScrollView Grid.Row=&quot;3&quot;&amp;gt;
            	&amp;lt;Label Margin=&quot;20,0&quot; HorizontalTextAlignment=&quot;Center&quot; Style=&quot;{StaticResource MainBodyLabel}&quot; 
				Text=&quot;Spicy jalapeno bacon ipsum dolor amet pork loin pork sint sed occaecat swine ham capicola deserunt pork belly frankfurter magna drumstick.&quot; /&amp;gt;
           &amp;lt;/ScrollView&amp;gt;

           &amp;lt;!-- follow button --&amp;gt;
           &amp;lt;Button Grid.Row=&quot;4&quot; Text=&quot;Follow&quot; Margin=&quot;20&quot; VerticalOptions=&quot;End&quot; Style=&quot;{StaticResource FollowButton}&quot;/&amp;gt;

        &amp;lt;/Grid&amp;gt;
    &amp;lt;/ScrollView&amp;gt;
&amp;lt;/ContentPage&amp;gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;a-little-bit-of-style&quot;&gt;A little bit of Style&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;You’ll notice that I use Styles throughout the page. This is really important so you are hard coding values all around the place. The basic structure of my ResourceDictionary is normally something like:&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;!-- Application resource dictionary --&amp;gt;
&amp;lt;ResourceDictionary&amp;gt;
    &amp;lt;!-- colors --&amp;gt;
    &amp;lt;!-- font families --&amp;gt;
    &amp;lt;!-- fonts --&amp;gt;
    &amp;lt;!-- styles --&amp;gt;
&amp;lt;/ResourceDictionary&amp;gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;colors&quot;&gt;Colors&lt;/h3&gt;

&lt;p&gt;First I specify the colors I use throughout the system. Of course, this makes it nice and easy to change later on.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;!-- colors --&amp;gt;
&amp;lt;Color x:Key=&quot;HeaderTextColor&quot;&amp;gt;#585858&amp;lt;/Color&amp;gt;
&amp;lt;Color x:Key=&quot;BodyTextColor&quot;&amp;gt;#C3C3C3&amp;lt;/Color&amp;gt;
&amp;lt;Color x:Key=&quot;ButtonBackgroundColor&quot;&amp;gt;#5992FF&amp;lt;/Color&amp;gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;font-families&quot;&gt;Font Families&lt;/h3&gt;

&lt;p&gt;Specifying font families for each platform allow me to specify the base fonts used for different weights and on different platforms. This makes it dead simple to change the fonts across the application if required.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;!-- font families --&amp;gt;
&amp;lt;OnPlatform x:Key=&quot;RegularFontFamily&quot; x:TypeArguments=&quot;x:String&quot;
            iOS=&quot;HelveticaNeue&quot;
            Android=&quot;sans-serif&quot; /&amp;gt;
&amp;lt;OnPlatform x:Key=&quot;LightFontFamily&quot; x:TypeArguments=&quot;x:String&quot;
            iOS=&quot;HelveticaNeue-Light&quot;
            Android=&quot;sans-serif-light&quot; /&amp;gt;
&amp;lt;OnPlatform x:Key=&quot;MediumFontFamily&quot; x:TypeArguments=&quot;x:String&quot;
            iOS=&quot;HelveticaNeue-Medium&quot;
            Android=&quot;sans-serif-medium&quot; /&amp;gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;fonts&quot;&gt;Fonts&lt;/h3&gt;

&lt;p&gt;Specifying the fonts allows me to create basic font types which incorporate FontSize and FontFamily, which references the font families already defined in resource dictionary.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;!-- fonts --&amp;gt;
&amp;lt;Font x:Key=&quot;TitleFont&quot; FontSize=&quot;20&quot; FontFamily=&quot;{StaticResource MediumFontFamily}&quot; /&amp;gt;
&amp;lt;Font x:Key=&quot;BodyFont&quot; FontSize=&quot;18&quot; FontFamily=&quot;{StaticResource RegularFontFamily}&quot; /&amp;gt;
&amp;lt;Font x:Key=&quot;TagTextFont&quot; FontSize=&quot;18&quot; FontFamily=&quot;{StaticResource RegularFontFamily}&quot; /&amp;gt;
&amp;lt;Font x:Key=&quot;StatsNumberFont&quot; FontSize=&quot;20&quot; FontFamily=&quot;{StaticResource LightFontFamily}&quot; /&amp;gt;
&amp;lt;Font x:Key=&quot;StatsCaptionFont&quot; FontSize=&quot;16&quot; FontFamily=&quot;{StaticResource LightFontFamily}&quot; /&amp;gt;
&amp;lt;Font x:Key=&quot;ButtonFont&quot; FontSize=&quot;14&quot; FontFamily=&quot;{StaticResource MediumFontFamily}&quot; /&amp;gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;styles&quot;&gt;Styles&lt;/h3&gt;

&lt;p&gt;And finally we have the styles, these are the various styles for elements I want to use throughout the application. This basically brings together colours and Fonts into styles which I can apply to my elements.&lt;/p&gt;

&lt;pre class=&quot;lang:xhtml decode:true &quot;&gt;&amp;lt;!-- Styles --&amp;gt;
&amp;lt;Style x:Key=&quot;ProfileNameLabel&quot; TargetType=&quot;Label&quot;&amp;gt;
    &amp;lt;Setter Property=&quot;TextColor&quot; Value=&quot;{StaticResource HeaderTextColor}&quot; /&amp;gt;
    &amp;lt;Setter Property=&quot;Font&quot; Value=&quot;{StaticResource TitleFont}&quot; /&amp;gt;
&amp;lt;/Style&amp;gt;

&amp;lt;Style x:Key=&quot;ProfileTagLabel&quot; TargetType=&quot;Label&quot;&amp;gt;
    &amp;lt;Setter Property=&quot;TextColor&quot; Value=&quot;{StaticResource BodyTextColor}&quot; /&amp;gt;
    &amp;lt;Setter Property=&quot;Font&quot; Value=&quot;{StaticResource TagTextFont}&quot; /&amp;gt;
&amp;lt;/Style&amp;gt;

&amp;lt;Style x:Key=&quot;StatsNumberLabel&quot; TargetType=&quot;Label&quot;&amp;gt;
    &amp;lt;Setter Property=&quot;TextColor&quot; Value=&quot;{StaticResource HeaderTextColor}&quot; /&amp;gt;
    &amp;lt;Setter Property=&quot;HorizontalTextAlignment&quot; Value=&quot;Center&quot;/&amp;gt;
    &amp;lt;Setter Property=&quot;Font&quot; Value=&quot;{StaticResource StatsNumberFont}&quot; /&amp;gt;
&amp;lt;/Style&amp;gt;

&amp;lt;Style x:Key=&quot;StatsCaptionLabel&quot; TargetType=&quot;Label&quot;&amp;gt;
    &amp;lt;Setter Property=&quot;TextColor&quot; Value=&quot;{StaticResource BodyTextColor}&quot; /&amp;gt;
    &amp;lt;Setter Property=&quot;Margin&quot; Value=&quot;0,-5,0,0&quot;/&amp;gt;
    &amp;lt;Setter Property=&quot;HorizontalTextAlignment&quot; Value=&quot;Center&quot;/&amp;gt;
    &amp;lt;Setter Property=&quot;Font&quot; Value=&quot;{StaticResource StatsCaptionFont}&quot; /&amp;gt;
&amp;lt;/Style&amp;gt;

&amp;lt;Style x:Key=&quot;MainBodyLabel&quot; TargetType=&quot;Label&quot;&amp;gt;
    &amp;lt;Setter Property=&quot;TextColor&quot; Value=&quot;{StaticResource BodyTextColor}&quot; /&amp;gt;
    &amp;lt;Setter Property=&quot;Font&quot; Value=&quot;{StaticResource BodyFont}&quot; /&amp;gt;
&amp;lt;/Style&amp;gt;

&amp;lt;Style x:Key=&quot;FollowButton&quot; TargetType=&quot;Button&quot;&amp;gt;
    &amp;lt;Setter Property=&quot;BackgroundColor&quot; Value=&quot;{StaticResource ButtonBackgroundColor}&quot;/&amp;gt;
    &amp;lt;Setter Property=&quot;TextColor&quot; Value=&quot;White&quot;/&amp;gt;
    &amp;lt;Setter Property=&quot;HeightRequest&quot; Value=&quot;40&quot;/&amp;gt;
    &amp;lt;Setter Property=&quot;BorderRadius&quot; Value=&quot;20&quot;/&amp;gt;
    &amp;lt;Setter Property=&quot;Font&quot; Value=&quot;{StaticResource ButtonFont}&quot;/&amp;gt;
&amp;lt;/Style&amp;gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;more-to-come&quot;&gt;More to come&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;So that’s a a quick sample of how to do a pretty common layout in Xamarin.Forms with grids and some overlapping elements. Always remember, there are lots of different ways we could achieve the same layout, but this what sprang to mind.&lt;/p&gt;

&lt;p&gt;I’ve got a whole series of layouts I’ll be posting over the comming weeks to show different layout techniques and ideas.&lt;/p&gt;

&lt;p&gt;As YouTubers would say: “let me know in the comments if you liked this” 🙂 Also, If you have any layouts that you thing would be interesting to cover, just let me know.&lt;/p&gt;

&lt;p&gt;Oh yeah, and you can grab the project over at &lt;a href=&quot;https://github.com/kphillpotts/XamarinFormsLayoutChallenges&quot;&gt;https://github.com/kphillpotts/XamarinFormsLayoutChallenges&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Layouts!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">Xamarin.Forms is a crazy productive framework for building cross platform apps. However, straight out of the box you might find your User Interfaces are a bit bland. A good understanding of the layout system (and a good graphic designer) are really going to help you make your UI’s awesome. (or at least not suck).</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Staying Up To Date with Xamarin Development</title>
      <link href="/staying-up-to-date-with-xamarin-development/" rel="alternate" type="text/html" title="Staying Up To Date with Xamarin Development" />
      <published>2016-07-18T01:57:59+02:00</published>
      <updated>2016-07-18T01:57:59+02:00</updated>
      <id>/staying-up-to-date-with-xamarin-development</id>
      <content type="html" xml:base="/staying-up-to-date-with-xamarin-development/">&lt;p class=&quot;p1&quot;&gt;
  Xamarin development is booming and as with any great technology, things change fast and you&amp;#8217;ll want to keep up to date with the latest news and releases. Xamarin has such a wonderful, thriving community that it can be a challenge!
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;!--more--&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;I&amp;#8217;m often asked by students in Xamarin University classes, what are the best resources to stay up to date with the all the awesomeness. Below are the main resources I use:&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&quot;blogs-p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Blogs&lt;/b&gt;&lt;/span&gt; {.p3}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Blogs are probably the most common way of staying up to date with the latest things happening in the Xamarin Community.  There are truck-loads of blogs out there, but if you are just going to follow a couple of blogs, then make it these ones:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://blog.xamarin.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;The Xamarin Blog&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: The official Xamarin blog which gets updated just about every day with new great aricles.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://planetxamarin.com&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Community Blogs (Planet Xamarin)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: An aggregation of some of the best blogs out there in the community. It is managed by Xamarin and includes posts from a lot of Xamarin staff and MVPs.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of listing out all the other great blogs here, I have a list of blogs I read on Xamarin / Development stuff &lt;a href=&quot;http://www.kymphillpotts.com/my-feedly-opml-file/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;at this link&lt;/span&gt;&lt;/a&gt;. (you can even grab the OPML file there).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;newsletters-p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Newsletters&lt;/b&gt;&lt;/span&gt; {.p3}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;You can spend a lot of time going down the rabbit hole of reading all the blogs out there. Sometimes it&amp;#8217;s easier to subscribe to a newsletter and let all that delicious Xamarin news come to you. Here are some of the best:&lt;/span&gt;
&lt;/p&gt;

&lt;h3 id=&quot;xamarin-specific-p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Xamarin Specific&lt;/b&gt;&lt;/span&gt; {.p5}&lt;/h3&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;These are the Xamarin specific newsletters and link blogs I follow:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://weeklyxamarin.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Weekly Xamarin&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: A hand-picked round up of the best Xamarin development links every week. Curated by Geoffrey Huntley and published every Friday. Free.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://allaboutxamarin.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;All About Xamarin&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Dan Rigby has &amp;#8220;The latest tips, tutorials, news, and resources for Xamarin app developers.&amp;#8221; delivered daily.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://paper.li/jamesqquick/1451575955&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Quick&amp;#8217;s Xamarin News&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; A daily dose of news about anything Xamarin.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://us13.campaign-archive2.com/home/?u=9bc39dc111f08d2a130409419&amp;amp;id=68a7cafa60&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin Forms Monthly Newsletter&lt;/a&gt; &amp;#8211; A monthly newsletter of Xamarin awesomeness!
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-general-p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;More General&lt;/b&gt;&lt;/span&gt; {.p5}&lt;/h3&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;As Xamarin developers it&amp;#8217;s also good to keep up on what&amp;#8217;s going on around the .NET space, here are some Feeds I follow:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://www.alvinashcraft.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Alvin Ashcrofts Morning Dew&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Links covering all things development.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://windowsappdev.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;WindowsAppDev&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Another Dan Rigby provided list that is focused on more general Windows development topics.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://blog.cwa.me.uk/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;The Morning Brew&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: A daily .NET software development link blog published by Chris Alcock.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;social-media-p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Social Media&lt;/b&gt;&lt;/span&gt; {.p3}&lt;/h2&gt;

&lt;h3 id=&quot;twitter-p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/span&gt; {.p5}&lt;/h3&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Twitter isn&amp;#8217;t just for letting everyone know what you had for breakfast, it&amp;#8217;s also an great way of staying up to date with the latest happenings. Here are some key twitter accounts and lists you can follow:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/xamarinhq&quot;&gt;&lt;span class=&quot;s4&quot;&gt;@XamarinHQ&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: The official twitter account for Xamarin.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/XamarinU&quot;&gt;&lt;span class=&quot;s4&quot;&gt;@XamarinU&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Xamarin University specific updates.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/XamarinEvents&quot;&gt;&lt;span class=&quot;s4&quot;&gt;@XamarinEvents&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Stay up to date with the latest Xamarin Events around the world.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/kwlothrop/lists/xamarin-mvps&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin MVPs List&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Kerry Lothrop has a list of all the Xamarin MVP twitter accounts.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/danvanderboom/lists/xamarindevs&quot;&gt;&lt;span class=&quot;s4&quot;&gt;XamarinDevs&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Another list of Xamarin accounts, this one is via Dan Vanderboom.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/kphillpotts/lists/xamarintweeters&quot;&gt;&lt;span class=&quot;s4&quot;&gt;XamarinTweeteers&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: I also have a list of people who tweet about xamarin.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/RobGibbens/lists/xamuinstructors&quot;&gt;&lt;span class=&quot;s4&quot;&gt;XamUInstructors&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Rob Gibbens has a list of Xamarin University Instructor tweet accounts.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://twitter.com/search?q=xamarin&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Search Twitter&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Finally you can just search twitter for Xamarin updates from everyone. Or you can search for Xamarin related accounts &lt;span class=&quot;s2&quot;&gt;&lt;a href=&quot;https://twitter.com/search?f=users&amp;amp;vertical=default&amp;amp;q=xamarin&quot;&gt;here&lt;/a&gt;.&lt;/span&gt;&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linked-in-p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Linked In&lt;/b&gt;&lt;/span&gt; {.p5}&lt;/h3&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;There are at least 26.2 Billion reasons to look here. Here are some key groups:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://www.linkedin.com/groups/4971276&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Developers&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: This is a networking group for all Xamarin professionals. A common space for all Xamarin developers to gather and share all things related to Xamarin.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://www.linkedin.com/groups/8184705&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Forms&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Focused just on Xamarin Forms.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://www.linkedin.com/groups/3914509&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin.iOS, Xamarin.Android, and Xamarin.Mac Developers and Users&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: The name says it all. This is focused on the more traditional Xamarin approaches.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://www.linkedin.com/groups/6664619&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Certified Developers&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Where all the certified kids hang out.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;facebook-p5&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Facebook&lt;/b&gt;&lt;/span&gt; {.p5}&lt;/h3&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Facebook is good for posting pictures of your family, but it&amp;#8217;s also got some good Xamarin groups:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;
    &lt;span class=&quot;s5&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://www.facebook.com/groups/xamarin.developers/&quot;&gt;Xamarin Developers&lt;/a&gt;: Yup, where the Xamarin Developers hang out on Facebook.&lt;/span&gt;&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://www.facebook.com/groups/xamarinuniversity/&quot;&gt;Xamarin University&lt;/a&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; Closed group for Xamarin University Students.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;podcasts-p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Podcasts&lt;/b&gt;&lt;/span&gt; {.p3}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;You can&amp;#8217;t beat podcasts for &amp;#8220;on the go&amp;#8221; information, check these ones out:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://soundcloud.com/xamarin-podcast&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Podcast&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: The home of the official Xamarin Podcast, bringing mobile developers the latest news and information about Xamarin and mobile development.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://gonemobile.io/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Gone Mobile Podcast&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Hosted by Greg Shackles, Gone Mobile is a podcast discussing the latest in mobile development, with a healthy bias towards Xamarin technologies. The podcast covers in-depth topics with guests ranging from Android, iOS, Windows Phone &amp;amp; Store development to mobile marketing and design, as well as other mobile or not so mobile related technologies.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://www.mergeconflict.fm/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Merge Conflict&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: A new podcast from James Montemagno and Frank A. Krueger (two developer legends) this is a weekly discussion on all things development, technology, &amp;amp; more.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;videos-p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Videos&lt;/b&gt;&lt;/span&gt; {.p3}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Some people prefer videos to learn and stay up to date&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://channel9.msdn.com/Shows/XamarinShow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Xamarin Show&lt;/a&gt; &amp;#8211; James Montemagno hosts this show over on MSDN Channel 9
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://www.youtube.com/user/XamarinVideos&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Videos&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: There are a plethora of great videos on the Xamarin Youtube channel.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://evolve.xamarin.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Evolve 2016 Videos&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Videos of all the sessions from the amazing Evolve 2016 conference.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://university.xamarin.com/guestlectures&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xamarin University Guest Lectures&lt;/a&gt; &amp;#8211; Industry experts providing Guest Lectures at Xamarin University. Available even if you aren&amp;#8217;t a Xamarin University subscriber (but you have to wait a month after the session to gain access)
  &lt;/li&gt;
  &lt;li class=&quot;li7&quot;&gt;
    &lt;a href=&quot;https://university.xamarin.com/lightninglectures&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin University Lightning Lecutres&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s6&quot;&gt; &amp;#8211; Short talks on common challenges.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://university.xamarin.com/self-guided&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin University Self Guided&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Free content from the amazing Xamarin University. The great news here is classes you take will earn credit towards certification.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://brax.tv/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Brax&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Short instructional videos on iOS, Android and Xamarin development.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://www.pluralsight.com/search?q=xamarin&amp;amp;categories=all&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Pluralsight&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Lots of development videos including some on Xamarin.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://www.youtube.com/user/jamesmontemagno/videos&quot;&gt;&lt;span class=&quot;s4&quot;&gt;James Montemagno&amp;#8217;s Videos (Motz Codes)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: James always has informative fun videos. He also has a series called Motz Codes.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;releases-support--help-p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Releases, Support &amp;amp; Help&lt;/b&gt;&lt;/span&gt; {.p1}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Sometimes you just want to chat to other developers to keep up to speed.&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://Xamarinchat.herokuapp.com&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Chat Slack Team&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: This slack team is full of knowledgeable developers. A great resource.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://forums.xamarin.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Forums&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: The official Xamarin forums is always a great place to ask questions and get answers. Be part of the community.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/xamarin&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Stack Overflow&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Stack Overflow has lots of questions and answers around Xamarin.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://developer.xamarin.com/releases&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Releases Page&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: This page shows all the releases across the various products, including older verions. The &lt;a href=&quot;https://developer.xamarin.com/releases/current/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Current&lt;/span&gt;&lt;/a&gt; link gives an overview of the current state of our distribution channels and preview releases. And within each of these you&amp;#8217;ll find links to the release notes and known issues.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://bugzilla.xamarin.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Bugzilla&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Where all the juicy bugs are found.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;irl-p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;IRL&lt;/b&gt;&lt;/span&gt; {.p1}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Nothing beats meeting fellow developers In Real Life, here are some links to help you meet them&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://www.meetup.com/topics/xamarin/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Meetups&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Listing of meetup groups over at the Meetup sight.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://www.xamarin.com/dev-days&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Xamarin Dev Days&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Xamarin Dev Days provide attendees with an intense, hands-on learning experience. Spend the morning exploring mobile development with sessions from Xamarin, our technology partners, and members of your local developer community, then roll up your sleeves for an afternoon dedicated to diving into code.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;books-p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Books&lt;/b&gt;&lt;/span&gt; {.p1}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;I don&amp;#8217;t spend a lot of time reading books on Xamarin, however, I couldn&amp;#8217;t go without mentioning the a couple of free Xamarin books that have excellent content and are totally free.&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li6&quot;&gt;
    &lt;span class=&quot;s5&quot;&gt;&lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/creating-mobile-apps-xamarin-forms/&quot;&gt;Creating Mobile Apps with Xamarin.Forms Book First Edition&lt;/a&gt; by the legendary Charles Petzold&lt;/span&gt;&lt;/span&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/enterprise-application-patterns/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Enterprise Application Patterns using Xamarin.Forms&lt;/a&gt; by the equally awesome David Britch
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-about-android-and-ios-p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;What about Android and iOS&lt;/b&gt;&lt;/span&gt; {.p1}&lt;/h2&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Yup, we should never forget that as Xamarin developers we are also Android and iOS developers, here are some resources:&lt;/span&gt;
&lt;/p&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://plus.google.com/+AndroidDevelopers&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Android Developers on Google+&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: A place for Android developers everywhere to meet, share and discuss the latest on Android development. This is the official Google+ home of the Android Engineering teams.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://androidweekly.net/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Android Weekly&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: a free newsletter that helps you to stay cutting-edge with your Android Development.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://indieiosfocus.curated.co/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Indie iOS Focus&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: Indie iOS Focus Weekly is focused on iOS developers and is hand curated every Thursday.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://www.raywenderlich.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;Ray Wenderlich&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: This blog is focused on developing high quality programming tutorials for both iOS and Android (mostly iOS though).&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&quot;li2&quot;&gt;
    &lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;http://iosdevweekly.com/&quot;&gt;&lt;span class=&quot;s4&quot;&gt;iOS Dev Weekly&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: a hand-picked round up of the best iOS development links every week. Curated by Dave Verwer and published every Friday. Free.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Hopefully this list of resources above will give you a launching point for staying up to date with Xamarin Development. There are so many great resources out there for Xamarin development I&amp;#8217;m sure I&amp;#8217;ve missed a few.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Let me know in the comments or shoot me an email and let me know your must-check-out resources.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Happy Coding!!!&lt;/span&gt;
&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kym Phillpotts</name>
        
        
      </author>

      

      
        <category term="Xamarin" />
      

      
        <summary type="html">Xamarin development is booming and as with any great technology, things change fast and you'll want to keep up to date with the latest news and releases. Xamarin has such a wonderful, thriving community that it can be a challenge!</summary>
      

      
      
    </entry>
  
</feed>
